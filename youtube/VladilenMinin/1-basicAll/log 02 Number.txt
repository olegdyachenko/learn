const num = 42// number
const float = 42.42//float
const pow = 10e3// 10*(10*10*10) = 10 000 короче тут мы возводим число в третью степень. 

Есть глобальный сущности. Number, String, Array

Number.MAX_SAFE_INTEGER // максимальное число 9007199254740991
Number.MIN_SAFE_INTEGER // максимальное число -9007199254740991
console.log(Math.pow(2,53)-1) // 2 в степени 53, минус 1 9007199254740991

 
Number.MAX_VALUE//максимальное значение в JS указанное число в 308 степени 1.7976931348623157e+308
Number.MIN_VALUE//максимальное значение с минусом 5e-324

console.log(Number.POSITIVE_INFINITY)// Infinity или бесконечность
console.log(Number.NEGATIVE_INFINITY)// -Infinity или бесконечность
1/0 = бесконечность
Number.NaN // не число. Но с типом число. Можно получить, если разделим число на undefined
Number.isNan// функция проверки является ли число Nan - можно писать просто isNan
Number.isFinite(Infinity)// является ли число бесконечностью - все это  нужно для проверки валидности кода

console.log('Number.MAX_SAFE_INTEGER', Number.MAX_SAFE_INTEGER)// вот так еще можно


const stringInt = '42'
const stringFloat = '42.42'
console.log(stringInt + 2)// будет 422, потому что это строка и произойдет приведение к строке и контактенация

console.log(Number.parseInt(stringInt) + 2)// преобразует в число и результат 44
console.log(Number(stringInt) + 2)// преобразует в число и результат 44
console.log(+stringInt + 2)// преобразует в число и результат 44

console.log(Number.parseFloat(stringInt) + 2)// преобразует в число и результат 44.42

console.log(0.4 + 0.2)/ вернет 0.600000000001 - особенность JS, пока не вникай, чтобы исправить делай ниже
console.log(parseFloat(0.4 + 0.2).toFixed(5))// отбрасывает после запятой все больше 5 знаков


новый тип данных числа BigInt, все что выше MAX_SAFE_INTEGER

Чтобы обозначить это число, в конце нужно поставить 9007199254740991n
Этот тип данных работает только с себе подобными. 900719925474099178907n - 900719925474099133n, и в консоли подсвечивется зеленым
у этого числа нет десятичных значений, это BigInteger. И он может работать только со своим типом данных. Если нужно привести к числу, parseInt в помощь
Обратное преобразование BigInt(4) //4n


Math.E // экспонента
Math.PI // число пи
Math.sqrt(25)//взять корень из 25, результат 5
Math.abs(-42)//взять модуль числа, результат 42
Math.max(11,22,33,422)// покажет максимальное число
Math.min(11,22,33,422)// покажет максимальное число
Math.floor(4.9)// округляет в меньшую сторону
Math.cell(4.9)// округляет в большую сторону
Math.random()//рандомное число, по умолчанию от 0 до 1 в десятичном формате

//рандом из заданного диапозона
function getRandomBetween(min, max){
    return Math.floor(Math.random() * (max - min + 1) + min)
}

console.log(getRandomBetween(10,42))