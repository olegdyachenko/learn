//Event Loop

// const timeout = setTimeout(() => {
//     console.log('After timeout')
// }, 2500)

// clearTimeout(timeout)// если удалить эту строку, то всего один раз

// const interval = setInterval(() => {
//     console.log('After Interval')
// }, 1000)

// clearInterval(interval)// если удалить эту строку, то всего один раз

// эмитация функции выше. Пока не очень понимаю, как это работает. 
// const delay = (callback, wait = 1000) => {
//     setTimeout(callback, wait)
// }

// delay( () => {
//     console.log('After 2 seconds')
// }, 2000)


//promise

// const delay = (wait = 1000) => {
//     const promise = new Promise((resolve, reject) => {
//         setTimeout(() =>{
//             resolve()
//         },wait)
//     })
//     return promise
// } 

// delay(1200)
//     .then( () => {
//         console.log('After 1 sec')
//     })
//     .catch( err => console.error(err))
//     .finally( () => console.log('Finally'))

// тут мы ошибку отлавливаем. очень интересно, но нихреан ен понятно
const delay = (wait = 1000) => {
    const promise = new Promise((resolve, reject) => {
        setTimeout(() =>{
            resolve()
        },wait)
    })
    return promise
} 

// delay(1200)
//     .then( () => {
//         console.log('After 1 sec')
//     })
//     .catch( err => console.error('Error: ',err))
//     .finally( () => console.log('Finally'))


const getData = () => new Promise(resolve => resolve([
    1,1,2,3,5,8,13
]))

// getData().then(data => console.log(data))

async function asyncExample() {
    try{
        await delay(1000)
        const data = await getData()
        console.log('Data', data)
    } catch (e) {
        console.log(e)
    } finally {
        console.log('Finally')
    }
}

asyncExample()