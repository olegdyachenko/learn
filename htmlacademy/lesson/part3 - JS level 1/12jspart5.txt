Курс 3. Знакомство с JavaScript. Часть 4: Динамические стили элементов


Урок 1. 

Свойство style

На новостном портале из стартового тренажёра и прошлых частей теперь публикуют не только короткие новости, но и длинные статьи. Чтобы их было удобно читать, у пользователей должна быть возможность менять размер и цвет текста, а также цвет фона в этих статьях.

Работать мы будем со страницей отдельной статьи. В верхней части страницы находятся настройки: два выпадающих списка с цветами и ползунок. Выпадающие списки отвечают за цвет текста и фон статьи. Ползунок управляет размером текста. Когда пользователь выбирает новое значение из списка или сдвигает ползунок, оформление статьи должно меняться.


Размер текста (14px)

Раньше, чтобы изменить внешний вид элемента, мы использовали классы. Но для этой задачи такой подход не годится. Цветов в списках и положений у ползунка слишком много — чтобы учесть все варианты, пришлось бы создать 76 классов. Есть другое решение — изменять стили элемента напрямую.

Управлять стилями элемента можно с помощью свойства style. После него через точку указывают то CSS-свойство, которое нужно изменить.

элемент.style.свойствоCSS
Чтобы изменить стиль элемента, указанному свойству нужно присвоить новое значение. Например:

let element = document.querySelector('p');

// Зададим абзацу зелёный цвет текста
element.style.color = 'green';
Стили, заданные с помощью свойства style, работают так же, как если бы их указали в разметке в атрибуте style самого элемента. Они имеют больший приоритет, чем CSS-правила из файла со стилями.

Так когда использовать классы, а когда — свойство style? Используйте style только в тех случаях, когда с помощью классов задачу решать неудобно.

На новостном сайте мы будем изменять стили отдельной статьи. Это элемент с классом longread. Найдём его и запишем в переменную. Чтобы проверить, как работает свойство style, изменим цвет текста в статье на фиолетовый.


Урок 2. 


Настраиваем цвет текста

Мы познакомились со свойством style и изменили цвет текста в статье. Кекс хочет, чтобы цвет текста менялся на тот, что пользователь выбрал в выпадающем списке «Цвет текста». В прошлой части мы уже работали с выпадающим списком.

У списка «Цвет текста» 18 значений. Пользователь может выбрать одно из них, развернув список и кликнув на нужный цвет:


Выбранное значение хранится в свойстве value выпадающего списка. Чтобы изменить цвет текста на тот, который выбрал пользователь, нужно записать выбранное значение в свойство style статьи.

Цвет текста должен меняться, когда пользователь выбирает новое значение, поэтому используем обработчик событий onchange. Например:

// Находим выпадающий список
let select = document.querySelector('select');

// Добавляем списку обработчик событий
select.onchange = function () {
  // Меняем цвет текста на выбранное значение
  longread.style.color = select.value;
};
Список «Цвет текста» на новостном сайте имеет класс color-setting. Найдём его и сохраним в переменную. После этого добавим списку обработчик событий и изменим цвет текста в статье на выбранное значение.



Урок 3.  

Закрыть
Получаем значение из поля с ползунком
Настройка цвета текста готова. Займёмся размером шрифта. Пользователь может изменять размер текста в статье, передвигая ползунок. Если сдвинуть ползунок влево, текст должен стать меньше, а если вправо — больше. Выбранный размер должен выводиться на страницу рядом с полем.

Поле с ползунком имеет класс size-setting. Вот как оно выглядит в разметке:

<input class="size-setting" type="range" min="8" max="48" step="1" value="14">
Ползунок позволяет выбрать число из указанного диапазона. В нашем случае это целое число от 8 до 48. Значение по умолчанию — 14, потому что размер шрифта в статье сейчас 14px. О том, как сверстать поле с ползунком, можно узнать, пройдя эту часть.

Значение, которое выбрал пользователь, получают в JavaScript с помощью свойства value. Это значение нам нужно вывести на страницу рядом с полем. Верстальщик подготовил для этого элемент <output> с классом pixels:

Размер текста (<output class="pixels">14</output>px)
Мы уже работали с элементом <output> в одной из прошлых частей. Запишем в его текстовое содержимое число, которое выбрал пользователь.

Нам нужно получать значение, когда пользователь передвигает ползунок. Используем обработчик событий onchange. Например:

// Находим поле и элемент для вывода значения
let range = document.querySelector('input');
let output = document.querySelector('output');

// Добавляем полю обработчик событий
range.onchange = function () {
  // Выводим значение на страницу
  output.textContent = range.value;
}
Найдём нужные элементы и выведем на страницу выбранный размер текста.


Урок 4. 

Закрыть
Настраиваем размер текста
Мы научились получать значение из поля с ползунком и вывели его на страницу. Но размер шрифта в статье пока не меняется. Чтобы это исправить, возьмём полученное значение и запишем его в стили статьи. Для этого снова используем свойство style.

В CSS за размер шрифта отвечает свойство font-size. В JavaScript нельзя использовать дефисы в названиях свойств, вместо этого для разделения слов используется «верблюжий» стиль. Например:

CSS	JаvaScript
font-size	fontSize
background-color	backgroundColor
border-left-width	borderLeftWidth
Получается, чтобы изменить размер шрифта, нам нужно присвоить новое значение свойству fontSize:

let element = document.querySelector('p');

// Зададим абзацу размер шрифта 24px
element.style.fontSize = '24px';
Из поля с ползунком мы получаем число. Но чтобы задать размер шрифта, также нужно указать единицы измерения. В нашем случае это будут пиксели. Используем конкатенацию, чтобы получить правильное значение:

longread.style.fontSize = sizeSetting.value + 'px';
Представим, что пользователь выбрал с помощью ползунка число 16. Тогда в стили элемента запишется результат конкатенации — '16px':

<article class="longread" style="font-size: 16px">
Зададим тексту в статье тот размер, который выбрал пользователь, и убедимся, что настройка работает.


Урок 5. 

Сравниваем onchange и oninput
Мы научились изменять размер текста в статье, когда пользователь передвигает ползунок. Но пользоваться нашей настройкой неудобно, потому что текст изменяется слишком резко. Это происходит потому, что обработчик событий onchange срабатывает только тогда, когда пользователь отпускает ползунок. В итоге текст меняется один раз, скачком.

Чтобы текст изменялся более плавно, нужно менять размер шрифта много раз, но по чуть-чуть. Для этого надо получать новое значение при каждом изменении положения ползунка. С этим нам поможет обработчик событий oninput. Мы уже работали с ним в одной из прошлых частей.

Разберём, в чём разница между двумя обработчиками:

onchange срабатывает, если значение поля ввода изменилось и пользователь закончил ввод. Например, если пользователь передвинул ползунок и отпустил его. Или ввёл что-то в текстовое поле и убрал из него курсор.
oninput срабатывает на каждое изменение значения, независимо от того, завершил пользователь ввод или нет. Например, он сработает на каждое изменение положения ползунка, даже если пользователь продолжает его двигать. И на каждый новый символ в текстовом поле, даже если пользователь продолжает вводить текст.
Сделаем настройку размера текста удобнее. Для этого заменим обработчик onchange на oninput. После этого убедимся, что текст в статье изменяется без скачков.

Когда мы меняем размер элементов, браузеру приходится перерисовывать страницу. Это трудоёмкая операция, и лучше выполнять её как можно реже. Используйте обработчик oninput с осторожностью.

О том, как браузер обрабатывает различные изменения и анимации, вы можете узнать из этой статьи.


https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/


Урок 6. 

Настраиваем цвет фона
Мы научились изменять цвет и размер текста в зависимости от значений, которые выбрал пользователь. Нам осталось запрограммировать настройку цвета фона статьи. Она очень похожа на настройку цвета текста, только значения мы будем получать из выпадающего списка с классом background-setting.

За цвет фона в CSS отвечает свойство background-color. Чтобы изменить его из JavaScript, имя свойства нужно написать в «верблюжьем» стиле.

За дело!

Свойство style позволяет не только изменять стили, но и получать их. Правда, с его помощью можно узнать только те стили, которые заданы в разметке в атрибуте style самого элемента. Такие стили ещё называют встроенными.

Чтобы получить все стили, которые применяются к элементу, используйте метод window.getComputedStyle. Вы можете почитать о нём в спецификации.

https://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-OverrideAndComputed-h3


Урок 7. 

Свойство type
Мяу! У меня есть гипотеза: если сделать удобную форму регистрации, посетители будут регистрироваться чаще. Надо проверить.

Кекс подкинул новую задачу. Нужно доработать страницу регистрации на новостном сайте. На странице есть поля для ввода логина и пароля, а также кнопка «Зарегистрироваться». Кекс хочет, чтобы пользователи могли по желанию увидеть пароль, который вводят. Также нужно запрограммировать шкалу сложности пароля, которая будет напоминать пользователям, что лучше придумать пароль подлиннее.

Начнём с показа пароля. Для ввода пароля используется специальное поле с типом password:

<input class="password" type="password" required>
Особенность этого поля в том, что введённый текст в нём маскируется. Обычно браузеры используют для этого звёздочки или кружочки. Подробнее о типах полей вы можете узнать из этой части.

Пароль маскируют, чтобы никто не мог его подсмотреть. Но набирать его при этом становится сложнее — можно ошибиться и не заметить. Если пользователь уверен, что за ним не подглядывают, и хочет убедиться, что не опечатался, то нужно дать ему возможность увидеть пароль.

Чтобы показать пароль, поле ввода пароля превращают в текстовое поле ввода. Для этого его тип изменяют на text. За тип в JavaScript отвечает свойство type. Чтобы изменить тип поля ввода, нужно записать в свойство type новое значение:

let input = document.querySelector('input');

// Сделаем input текстовым полем ввода
input.type = 'text';
Поле для ввода пароля имеет класс password. Найдём его, запишем в переменную и сделаем обычным текстовым полем.



Урок 8. 


Используем чекбокс, чтобы показать пароль
Мы научились изменять тип поля ввода. Чтобы выполнить задачу, нам нужно менять тип поля с паролем, когда пользователь ставит галочку в чекбоксе «Показать пароль».

Показать пароль

Чекбокс — это поле ввода, у которого может быть одно из двух состояний: включён или выключен. Обычно в браузерах на состояние чекбокса указывает галочка: если галочка стоит — чекбокс включён, если галочки нет — выключен. Когда галочку ставят или убирают, состояние чекбокса меняется. Чтобы отследить это событие из скрипта, используем обработчик событий onchange.

Чекбокс «Показать пароль» имеет класс show-password. Найдём его, запишем в переменную и добавим ему обработчик. Затем переместим инструкцию, изменяющую тип поля, внутрь обработчика. После этого убедимся, что если включить чекбокс, пароль становится виден.


Урок 9. 

Свойство checked
Отлично! Мы сказали JavaScript показывать пароль, если пользователь включил чекбокс. Если чекбокс выключили, пароль должен прятаться. Но сейчас этого не происходит: достаточно поставить галочку один раз, и пароль будет виден всегда. Как это исправить?

Добавим в обработчик событий условную конструкцию и будем проверять, включён ли чекбокс. Если включён, поле с паролем нужно сделать текстовым. А если выключен, то полю нужно вернуть тип password. Чтобы проверить состояние чекбокса, используем свойство checked.

Это свойство имеет булево значение: true, если чекбокс включён, и false, если нет.

// Проверяем, включён ли чекбокс
if (showPassword.checked) {
  // Показываем пароль
} else {
  // Прячем пароль
}
Добавим условную конструкцию в обработчик событий и убедимся, что пароль показывается, если поставить галочку, и прячется, если её убрать.



Урок 10. 


Изменяем ширину полоски
Мы запрограммировали функцию «показать пароль». Теперь нам нужно сделать шкалу, которая покажет, насколько надёжен придуманный пользователем пароль. Шкала — это тонкая полоска в нижней части поля «Пароль», которая должна расти с каждым введённым символом. Если пароль слишком короткий, полоска должна быть красной, если пароль средней длины — жёлтой, а если пароль достаточно длинный — зелёной.

Полоска должна увеличиваться с каждым введённым символом. Создавать отдельный класс для каждой длины пароля было бы неудобно, поэтому мы будем изменять стиль элемента с помощью свойства style. Какое CSS-свойство нужно изменить, чтобы сделать полоску длиннее? Так как она располагается горизонтально, то менять надо свойство width, отвечающее за ширину элемента.

Изначально полоска имеет ширину 0% и не видна:

пароль
**********
А вот так она будет выглядеть, если задать ей ширину 50%:

пароль
**********
Если ширина элемента задана в процентах, она рассчитывается относительно ширины родительского элемента. Если ширина родителя 200px, то вложенный элемент с шириной 50% будет иметь абсолютную ширину 100px. Подробнее об относительных и абсолютных значениях вы можете узнать в этом задании.

Полоска имеет класс security-bar. Найдём её, запишем в переменную и зададим ей ширину 50%.


Урок 11. 

Привязываем ширину полоски к длине пароля
Мы нашли полоску, показывающую надёжность пароля, и задали ей фиксированную ширину. Но нам нужно, чтобы ширина полоски менялась вместе с длиной введённого пароля.

Длина введённого значения хранится в его свойстве length. Мы работали с этим свойством в одной из прошлых частей.

let input = document.querySelector('input');

console.log(input.value); // Выведет: Кекс
console.log(input.value.length); // Выведет: 4
С каждым введённым символом полоска должна увеличиваться на 10% от ширины родителя.

Длина пароля	Ширина полоски
1	10%
2	20%
3	30%
Выходит, чтобы получить ширину полоски, нам нужно умножить длину пароля на число 10. Умножение в JavaScript обозначается звёздочкой:

console.log(3 * 10); // Выведет: 30
Используем умножение, чтобы задать полоске ширину. И не забудем добавить с помощью конкатенации единицы измерения — проценты:

securityBar.style.width = password.value.length * 10 + '%';
Представим, что пользователь ввёл пароль длиной 4 символа:

securityBar.style.width = 4 * 10 + '%'; // Результат: '40%'
Чтобы ширина полоски менялась одновременно с длиной пароля, мы должны получать длину при каждом изменении в поле ввода. Используем для этого обработчик событий oninput. Добавим его полю ввода пароля и свяжем ширину полоски и длину введённого значения. После этого убедимся, что полоска растёт вместе с длиной пароля.

Что случится, если ширина полоски окажется больше 100%? Всё зависит от того, какое значение указано в CSS свойстве overflow родительского элемента. Мы использовали значение hidden, поэтому «лишняя» часть полоски просто не будет отображаться.


Урок 12. 

Сохраняем длину пароля в переменной
Мы заставили полоску расти вместе с длиной пароля. Отличная работа! Теперь нам нужно задать ей правильный цвет. Если пароль короткий, полоска должна быть красной, если средний — жёлтой, а если пароль длинный — зелёной. Для этого нам понадобится условная конструкция, в которой мы будем сравнивать длину пароля password.value.length с разными числами. Запись в итоге может получиться очень длинной.

Позаботимся о своём удобстве заранее — запишем длину пароля в отдельную переменную и будем использовать именно её.

let passLength = password.value.length;
Длина пароля меняется с каждым введённым символом. Чтобы в переменной passLength всегда было актуальное значение, присваивать его надо внутри обработчика событий oninput.

Объявим переменную passLength и используем её в инструкциях, где нам нужна длина пароля. Проверим, что ничего не сломалось.


Урок 13. 

Операторы сравнения
Мы создали переменную, в которую записали длину пароля. Используем её, чтобы задать полоске правильный цвет. Если пароль меньше или равен 5 символам, то полоска должна быть красной.

Мы уже работали с оператором сравнения «больше». В JavaScript есть и другие операторы сравнения:

1 < 2;  // Оператор «меньше»
1 <= 2; // Оператор «меньше или равно»
1 >= 2; // Оператор «больше или равно»
Обратите внимание, операторы «меньше или равно» и «больше или равно» обозначаются двумя символами: угловой скобкой и знаком равно. Эти операторы работают так же, как в математике. Например, оператор «меньше или равно» вернёт true, если число слева меньше числа справа или если числа равны.

Если длина пароля меньше или равна 5 символам, полоска под полем ввода должна стать красной. Добавим внутрь обработчика oninput условную конструкцию и, если условие истинно, зададим полоске красный цвет фона:

if (passLength <= 5) {
  securityBar.style.backgroundColor = 'red';
}


Урок 14. 


Конструкция else if
Мы сказали JavaScript покрасить полоску в красный цвет, если пароль слишком короткий. Если пароль средней длины, полоска должна стать жёлтой.

Что значит «средней длины»? Это значит, что пароль должен быть больше 5 символов И при этом меньше 10. Чтобы создать двойное условие, используем оператор логическое И:

passLength > 5 && passLength < 10
Но где нам указать это условие? Используем конструкцию else if. Она позволяет добавить в условную конструкцию альтернативную ветку c условием:

if (passLength <= 5) {
  // Инструкции выполнятся, если истинно первое условие
} else if (passLength > 5 && passLength < 10) {
  // Инструкции выполнятся, если истинно второе условие
}
После else if в круглых скобках указывают условие, а в фигурных — инструкции, которые должны выполниться, если это условие вернёт true.

Представим, что пользователь ввёл пароль длиной 6 символов. Сначала JavaScript проверит первое условие: длина пароля меньше или равна 5 символам? Нет. Значит, идём дальше. Следующее условие: длина пароля больше 5 символов, но меньше 10? Да. Значит, выполняем инструкции из второй ветки.

Веток else if в условной конструкции может быть сколько угодно. Но чем их больше, тем запутаннее получается код.

Добавим в нашу условную конструкцию ветку else if и скажем JavaScript покрасить полоску в жёлтый цвет, если пароль длиннее 5 символов, но короче 10.

В роли «жёлтого» цвета — золотой. Потому что дизайнер так видит.


Урок 15. 

авершаем работу над страницей регистрации
Мы добавили в условную конструкцию альтернативную ветку else if, и теперь полоска меняет цвет с красного на жёлтый, если пароль длиннее 5 символов. Но если пароль длиной 10 символов или больше, полоска должна стать зелёной. Мы могли бы добавить ещё одну ветку else if, но в данном случае хватит и просто else.

Представим, что пароль длиной 11 символов. В этом случае оба условия вернут false, и JavaScript выполнит инструкции из ветки else.

if (passLength <= 5) {
  // Инструкции выполнятся, если истинно первое условие
} else if (passLength > 5 && passLength < 10) {
  // Инструкции выполнятся, если истинно второе условие
} else {
  // Инструкции выполнятся, если оба условия ложны
}
Добавим третью ветку в нашу условную конструкцию и убедимся, что цвет полоски меняется с красного на жёлтый, а после — с жёлтого на зелёный.


Урок 16. КОНСПЕКТ

Конспект «Динамические стили элементов»
Свойство style
С помощью свойства style можно управлять стилями элемента. После style через точку указывают то CSS-свойство, которое нужно изменить. Чтобы изменить стиль элемента, указанному свойству нужно присвоить новое значение

let element = document.querySelector('p');

// Зададим абзацу зелёный цвет текста
element.style.color = 'green';
Стили, заданные с помощью свойства style, работают так же, как если бы их указали в разметке в атрибуте style самого элемента. Они имеют больший приоритет, чем CSS-правила из файла со стилями.

В JavaScript нельзя использовать дефисы в названиях свойств, вместо этого для разделения слов используется «верблюжий» стиль. Например:

CSS	JаvaScript
font-size	fontSize
background-color	backgroundColor
border-left-width	borderLeftWidth
Если мы получаем данные из поля ввода, то чтобы задать единицы измерения, используем конкатенацию:

longread.style.fontSize = sizeSetting.value + 'px';

// Допустим, пользователь ввёл число 16
longread.style.fontSize = 16 + 'px'; // Результат: '16px'
Чтобы узнать, какие стили уже применяются к элементу, используйте метод window.getComputedStyle.

Обработчики onchange и oninput
Чтобы отслеживать изменения в поле ввода, можно использовать обработчики onchange и oninput. Разница между ними заключается в следующем:

onchange срабатывает, если значение поля ввода изменилось и пользователь закончил ввод. Например, если пользователь передвинул ползунок и отпустил его. Или ввёл что-то в текстовое поле и убрал из него курсор.
oninput срабатывает на каждое изменение значения, независимо от того, завершил пользователь ввод или нет. Например, он сработает на каждое изменение положения ползунка, даже если пользователь продолжает его двигать. И на каждый новый символ в текстовом поле, даже если пользователь продолжает вводить текст.
Когда мы меняем размер элементов, браузеру приходится перерисовывать страницу. Это трудоёмкая операция, и лучше выполнять её как можно реже. Используйте обработчик oninput с осторожностью.

Свойство type
Для ввода пароля используется специальное поле с типом password. Особенность этого поля в том, что введённый текст в нём маскируется. Обычно браузеры используют для этого звёздочки или кружочки. Подробнее о типах полей вы можете узнать из этой части.

Чтобы показать пароль, нужно превратить поле ввода пароля в текстовое поле ввода. Для этого надо изменить его тип на text. За тип в JavaScript отвечает свойство type. Чтобы изменить тип поля ввода, нужно записать в свойство type новое значение:

let input = document.querySelector('input');

// Сделаем input текстовым полем ввода
input.type = 'text';
Чекбокс и свойство checked
Чекбокс — это поле ввода, у которого может быть одно из двух состояний: включён или выключен. Обычно в браузерах на состояние чекбокса указывает галочка: если галочка стоит — чекбокс включён, если галочки нет — выключен. Когда галочку ставят или убирают, состояние чекбокса меняется. Чтобы отследить это событие из скрипта, используем обработчик событий onchange.

Чтобы проверить состояние чекбокса, используем свойство checked. Это свойство имеет булево значение: true, если чекбокс включён, и false, если нет.

// Проверяем, включён ли чекбокс
  if (showPassword.checked) {
    // Инструкции выполнятся, если чекбокс включён
  } else {
    // Инструкции выполнятся, если чекбокс выключен
  }
Операторы сравнения и умножение
В JavaScript есть несколько операторов сравнения. Эти операторы работают так же, как в математике:

1 > 2;  // Оператор «больше»
1 < 2;  // Оператор «меньше»
1 >= 2; // Оператор «больше или равно»
1 <= 2; // Оператор «меньше или равно»
Операторы «больше или равно» и «меньше или равно» обозначаются двумя символами: угловой скобкой и знаком равно.

Умножение в JavaScript обозначается звёздочкой:

console.log(3 * 10); // Выведет: 30
Конструкция else if
Конструкция else if позволяет добавить в условную конструкцию альтернативную ветку с условием. После else if в круглых скобках указывают условие, а в фигурных — инструкции, которые должны выполниться, если это условие вернёт true.

if (условие-1) {
  // Инструкции выполнятся, если истинно условие-1
} else if (условие-2) {
  // Инструкции выполнятся, если условие-1 ложно, а условие-2 истинно
} else {
  // Инструкции выполнятся, если оба условия ложны
}
JavaScript выполняет инструкции сверху вниз. Сначала он проверит условие-1. Если оно истинно, выполнятся инструкции из первой ветки. Если условие-1 ложно, JavaScript проверит условие-2. Если оно истинно, выполнятся инструкции из второй ветки. Если оба условия ложны, то выполнятся инструкции из ветки else.

Веток else if в условной конструкции может быть сколько угодно. Но чем их больше, тем запутаннее получается код.



Урок 17. ИСПЫТАНИЕ


let pixel = document.querySelectorAll('.pixel');
let chosen = document.querySelectorAll('.chosen-color');
let eraser = document.querySelector('.eraser');

for(let pix of pixel){

  pix.onclick = function(){
      for(let ch of chosen){
        if(eraser.checked){
          pix.style.backgroundColor = 'white';
        }else{
          pix.style.backgroundColor = ch.value;
      }
    }
  }
}


