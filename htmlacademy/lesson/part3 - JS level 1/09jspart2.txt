Курс 3. Знакомство с JavaScript. Часть 5: Оформление текста

Урок 1. 

<script src="likes.js"></script>



Урок 2. 

Создаём счётчик лайков

Кнопка «сердечко» сохранена в переменной heart. Когда пользователь ставит лайк, кнопке добавляется класс added, и «сердечко» становится полностью закрашенным. Когда лайк отменяют, класс added убирается, и кнопка возвращается в первоначальное состояние. За переключение класса отвечает метод classList.toggle, мы с ним уже знакомы. Для отображения числа лайков на странице верстальщик подготовил элемент с классом likes-number.

Вот как кнопка выглядит в разметке:

<!-- Лайка нет, сердечко пустое -->
<button class="heart" type="button"><span class="likes-number"></span></button>

<!-- Лайк есть, сердечко закрашено -->
<button class="heart added" type="button"><span class="likes-number"></span></button>
Чтобы хранить количество лайков, нам понадобится переменная-счётчик. Её значением будет число.

// Присвоим переменной значение — число
let number = 7;
Обратите внимание, мы не оборачиваем числа в кавычки.

Назовём переменную-счётчик counter и присвоим ей значение 0 — пока никто не кликнул, лайков нет. После этого выведем значение счётчика на страницу с помощью свойства textContent элемента с классом likes-number. 

heart.onclick = function () { //по клику выводи цифру и добавляет класс, или убирает его. 
  likesNumber.textContent = counter;
  heart.classList.toggle('added');
};





Урок 3.

Изменяем значение счётчика
Мы создали счётчик лайков, но пока его значение не изменяется при кликах на «сердечко». Давайте это исправим. Нам нужно, чтобы значение счётчика увеличивалось, когда пользователь ставит лайк, и уменьшалось, когда лайк отменяют.

Чтобы увеличить или уменьшить число в JavaScript, можно использовать разные записи: полную или краткую — результат будет одинаковым.

let number = 0;

// Полная запись
number = number + 2; // Значение переменной: 2
number = number - 2; // Значение переменной: 0

// Краткая запись
number += 2; // Значение переменной: 2
number -= 2; // Значение переменной: 0

Наш счётчик будет увеличиваться и уменьшаться на единицу. Это очень распространённая операция, и в JavaScript для неё есть особая запись.

// Увеличит число на 1
number++; // Значение переменной: 1

// Уменьшит число на 1
number--; // Значение переменной: 0



Урок 4.

Метод classList.contains, проверяем наличие класса
Отлично! Мы создали счётчик лайков, значение которого увеличивается при каждом клике. Но ведь число лайков не должно только расти.

Если пользователь ещё не ставил лайк, то клик на «сердечко» лайк добавит, и значение счётчика должно увеличиться. А если лайк уже есть, то клик по кнопке его отменит, и значение счётчика должно уменьшиться. Как нам различать эти клики? Мы можем проверить, есть ли у элемента heart класс added. Если класса у элемента ещё нет, то лайк добавляется, а если класс уже есть, то лайк снимается.

Чтобы проверить, есть ли у элемента класс, используем метод classList.contains:

элемент.classList.contains('класс');
В скобках указывается класс, наличие которого нужно проверить. Когда метод сообщает какую-то информацию, говорят, что он возвращает значение. Метод classList.contains вернёт true (истина), если класс у элемента есть, и false (ложь), если класса нет.

Значения true и false называют булевыми. Таких значений всего два.

Нам нужно проверять, есть ли у элемента heart класс added. Посмотрим, как работает метод classList.contains: скажем JavaScript выводить в консоль значения, которые этот метод возвращает, и кликнем несколько раз на «сердечко», чтобы переключить класс.



Урок 5.


Условная конструкция if
Мы научились определять, есть ли у элемента класс. От класса зависит, что нам нужно делать: увеличивать или уменьшать число на счётчике лайков. Как сказать JavaScript, чтобы в одном случае выполнялись одни инструкции, а в другом — другие? Воспользуемся условной конструкцией.

Условная конструкция позволяет выполнять действия в зависимости от условия. Условие — это инструкция, которая возвращает true или false. Условная конструкция выглядит так:

if (условие) {
  // Инструкции, которые выполнятся, если условие истинно
}
Условие записывают в круглых скобках после слова if (переводится с английского как «если»). После этого внутри фигурных скобок пишут инструкции, которые выполнятся, если условие истинно. Условие считается истинным, если инструкция внутри круглых скобок возвращает true. Например:

let element = document.querySelector('div');
if (element.classList.contains('some-class')) {
  // Сообщение выведется, только если класс у элемента есть
  console.log('Условие истинно');
}
Если у элемента heart есть класс added, значит, пользователь уже поставил лайк и теперь хочет его отменить. В этом случае мы должны уменьшить значение счётчика. Добавим в скрипт условную конструкцию: если класс у элемента есть, то значение счётчика уменьшается на 1.


Урок 6.

Конструкция else, альтернативная ветка
Здорово, наш счётчик уже не растёт при каждом клике! Но он и не уменьшается, когда лайк убирают. Это происходит потому, что, когда у элемента heart есть класс added, мы сначала уменьшаем значение счётчика, а после условной конструкции снова увеличиваем. Сейчас инструкция counter++; выполняется независимо от условия. Как сделать так, чтобы значение увеличивалось только тогда, когда класса нет?

Используем else (переводится как «иначе»). Это конструкция, которая говорит JavaScript, что делать, если условие в if ложно. Внутри фигурных скобок после else пишут инструкции, которые должны выполниться, если условие вернёт false.

if (условие) {
  // Инструкции, которые выполнятся, если условие истинно
} else {
  // Инструкции, которые выполнятся, если условие ложно
}
Использование условных конструкций в скрипте ещё называют ветвлением, а код внутри фигурных скобок — веткой.

Добавим в наш скрипт ветку else: скажем JavaScript увеличивать значение счётчика только тогда, когда у элемента heart ещё нет класса added.
        if (heart.classList.contains('added')) {
            counter--;
        } else{
            counter++;
        }

Урок 7.


Закрыть
Изменяем значение из разметки
Счётчик лайков работает! Когда лайк ставят, значение счётчика увеличивается, а когда лайк отменяют, значение уменьшается. Есть только одна маленькая проблема: наш счётчик не учитывает других пользователей сайта. Что, если кто-то другой уже поставил лайк? Нам следует брать число лайков, которое уже есть на странице, и изменять именно его.

Возьмём значение из likesNumber.textContent и изменим его на единицу:

// Увеличит значение на 1
likesNumber.textContent++;

// Уменьшит значение на 1
likesNumber.textContent--;
Теперь переменная counter уже не нужна, так что мы её просто удалим. Счётчик лайков готов!

Счётчик лайков можно улучшить, добавив кнопке heart атрибут aria-pressed. Этот атрибут указывает, в каком состоянии находится кнопка-переключатель. Например, если лайк стоит, то значение у атрибута должно быть "true", а если лайка нет, то "false". Атрибут aria-pressed не влияет на внешний вид кнопки, но он помогает скринридерам правильно прочитать содержимое страницы.

Подробнее об атрибуте aria-pressed и том, как изменять его с помощью JavaScript, вы можете узнать в статье.





Урое 8.

Закрыть
Комментарии для новостного сайта
Больше, чем читать новости, люди любят их обсуждать. Поэтому Кекс решил, что на новостном сайте должны быть ещё и комментарии. А поскольку в интернете никто не должен знать, что собеседник — кот, комментарии будут анонимными. Разработчики уже начали работу, но переключились на другое задание, а закончить с комментариями поручили нам.

Верстальщик добавил на страницу с отдельной новостью ленту комментариев и форму добавления нового комментария. Программисты уже нашли эту форму с помощью JavaScript, сохранили её в переменную commentForm и добавили обработчик событий. Скрипт находится в файле comments.js, он уже подключён.

Лента, куда будут выводиться комментарии, это элемент с классом comment-list. Обратите внимание, в ленте уже есть один комментарий.

<ol class="comment-list">
  <li class="user-comment">Да ну, бред какой-то…</li>
</ol>
Скажем JavaScript найти элемент с классом comment-list, запишем этот элемент в переменную и изменим его текстовое содержимое. Посмотрим, что из этого получится.


Урок 9.


Метод append, добавление содержимого
Мы изменили текстовое содержимое элемента commentList и при этом удалили комментарий, который уже был в ленте. Это произошло потому, что новое значение textContent переписывает всё содержимое элемента, а значит, с его помощью не получится устроить жаркую дискуссию в комментариях. Нужно, чтобы новые комментарии добавлялись в конец ленты, после старых комментариев. С этим нам поможет метод append. Используют его так:

элемент-родитель.append(добавляемый-элемент);
Метод append добавляет указанный в скобках элемент в конец элемента-родителя. При этом содержимое элемента-родителя не затирается. Добавлять с помощью этого метода можно и элементы, и простые строки.

Представим, что у нас есть следующая разметка на странице:

<p>Хорошо быть котом.</p>
Найдём этот абзац и используем метод append:

let paragraph = document.querySelector('p');
paragraph.append(' А разработчиком — ещё лучше!');
Когда команда выполнится, в браузере пользователя разметка будет выглядеть так:

<p>Хорошо быть котом. А разработчиком – ещё лучше!</p>
Новая строка добавилась в конец элемента, ничего не удаляя. То, что нужно для новых комментариев! Чтобы в этом убедиться, используем метод append и добавим строку в конец ленты комментариев.


Урок 10.


Закрыть
Метод createElement, создание элемента
У нас получилось добавить сообщение в конец ленты и сохранить всё, что там было до этого!

Однако каждый комментарий в ленте — это не просто строка, а отдельный элемент. Перед тем, как добавить его в ленту, этот элемент нужно создать.

Чтобы создать новый элемент, воспользуемся методом createElement:

document.createElement('имя тега');
Мы создаём новый элемент на странице, к которой подключён скрипт, поэтому используем слово document. Внутри скобок в кавычках нужно указать элемент, который мы хотим создать. Например:

// Создаст новый элемент <div> и запишет его в переменную
let newElement = document.createElement('div');
Лента комментариев на нашей странице — это нумерованный список, а каждый комментарий — элемент списка. Поэтому мы создадим элемент li:

<ol class="comment-list">
  <li class="user-comment">Да ну, бред какой-то…</li>
</ol>
Создадим новый элемент списка и протестируем результат: скажем JavaScript вывести созданный элемент в консоль


Урок 11.

Закрыть
Добавляем элемент на страницу
Отлично, мы создали с помощью JavaScript новый элемент списка и вывели его в консоль. Но на странице новый элемент не появился. Почему? Дело в том, что JavaScript не знает, где его разместить. Пока мы ему не скажем, новый элемент будет доступен из скрипта, но в разметке не появится.

Чтобы указать, где должен находиться новый элемент, воспользуемся уже знакомым нам методом append:

// Создаём новый элемент
let newElement = document.createElement('div');

// Находим элемент-родитель
let parent = document.querySelector('.parent');

// Добавляем новый элемент в конец элемента-родителя
parent.append(newElement);
На новостном сайте новые комментарии должны добавляться в конец ленты. Вот что произойдёт, когда мы добавим созданный элемент:

<!-- Исходная разметка -->
<ol class="comment-list">
  <li class="user-comment">Да ну, бред какой-то…</li>
</ol>

<!-- Разметка в браузере после commentList.append(newComment) -->
<ol class="comment-list">
  <li class="user-comment">Да ну, бред какой-то…</li>
  <li></li>
</ol>
Метод append не копирует элементы, а перемещает. Если указать в скобках элемент, который уже есть в разметке, этот элемент исчезнет со своего прежнего места и появится там, куда его добавил метод append. Получить таким образом несколько элементов не выйдет.



    let commentForm = document.querySelector('.comment-form');
    let commentList = document.querySelector('.comment-list');

    commentForm.onsubmit = function (evt) {
    evt.preventDefault();

    };

    let newComment = document.createElement('li');
    commentList.append(newComment);


Урок 13.

Закрыть
Меняем свойства созданного элемента
Мы научились добавлять в ленту новые элементы при отправке формы! Чтобы они стали похожи на комментарий, который уже есть в ленте, нужно добавить новым элементам подходящий класс.

Элементы, созданные с помощью метода createElement, можно изменять так же, как и любые другие. Мы можем менять их текстовое содержимое, переключать классы и так далее.

// Создаём новый абзац
let newElement = document.createElement('p');

// Меняем текстовое содержимое
newElement.textContent = 'Я новый абзац!';

// Добавляем класс
newElement.classList.add('some-text');

// Добавляем элемент на страницу
parent.append(newElement);
Когда инструкции будут выполнены, на странице появится новый абзац с классом some-text.

<div class="parent">
  <!-- Содержимое элемента parent -->

  <p class="some-text">Я новый абзац!</p>
</div>
У комментариев в ленте должен быть класс user-comment. Добавим его созданному элементу перед тем, как вывести его на страницу. А чтобы элемент ещё больше походил на комментарий, запишем в его текстовое содержимое временный текст-заглушку. Его ещё называют «рыбой». В будущем мы будем использовать данные, которые пользователь ввёл в форму, но для тестирования кода хватит и «рыбы».

Если всё правильно, в ленте появится новый комментарий:

<ol class="comment-list">
  <li class="user-comment">Да ну, бред какой-то…</li>
  <li class="user-comment">Новый комментарий</li>
</ol>
Вы можете сначала добавить новый элемент на страницу, а потом уже менять ему текстовое содержимое и класс, но тогда браузеру придётся несколько раз перерисовывать страницу. Это неэффективно. Лучше добавлять на страницу уже полностью сформированный элемент.


Урок 14.


Завершаем работу над комментариями
Мы научились создавать элементы, менять их и добавлять на страницу. Комментарии для новостного сайта практически готовы, остался последний шаг — добавить в ленту комментарий именно с тем текстом, который пользователь ввёл в форму.

Мы уже получали данные из поля ввода и выводили их на страницу. Для этого мы использовали свойство value.

let input = document.querySelector('input');
let paragraph = document.querySelector('p');

// Записываем данные из поля ввода в текстовое содержимое элемента
paragraph.textContent = input.value;
Данные из поля ввода мы запишем вместо «рыбы» в textContent созданного нами элемента. А само поле ввода после этого очистим, чтобы пользователь по ошибке не отправил один и тот же комментарий несколько раз. Для этого в свойство value поля ввода запишем пустую строку. Вот так:

input.value = '';
Текст комментария мы возьмём из поля ввода с классом comment-field и запишем в текстовое содержимое нового комментария перед тем, как добавить его на страницу. После этого очистим поле ввода — и дело сделано!



Урок 15. КОНСПЕКТ

Как подключить на страницу несколько скриптов
Чтобы подключить на страницу ещё один файл с кодом на JavaScript, снова используем тег script:

<body>

  <script src="themes.js"></script>
  <script src="likes.js"></script>
</body>
Браузер обрабатывает инструкции последовательно: сначала в первом файле, потом во втором — как будто они все находятся в одном месте. Программы часто разбивают на несколько файлов, обычно одному файлу соответствует одна задача: например, управление темами или подписка на рассылку.

Числа
Переменной можно присвоить значение — число. Числа не нужно оборачивать в кавычки:

let number = 0;
Чтобы увеличить или уменьшить число в JavaScript, можно использовать разные записи:

// Полная запись
number = number + 2; // Значение переменной: 2
number = number - 2; // Значение переменной: 0

// Краткая запись
number += 2; // Значение переменной: 2
number -= 2; // Значение переменной: 0

// Увеличение числа на 1
number++; // Значение переменной: 1

// Уменьшение числа на 1
number--; // Значение переменной: 0
Метод classList.contains
Метод classList.contains проверяет, есть ли у элемента класс:

элемент.classList.contains('класс');
Метод вернёт true (истина), если класс у элемента есть, и false (ложь), если класса нет. Значения true и false называют булевыми. Таких значений всего два.

Условная конструкция
Условная конструкция позволяет выполнять действия в зависимости от условия. Условие — это инструкция, которая возвращает true или false. Выглядит условная конструкция так:

if (условие) {
  // Инструкции, которые выполнятся, если условие истинно
} else {
  // Инструкции, которые выполнятся, если условие ложно
}
if
Условие записывают в круглых скобках после слова if (переводится с английского как «если»). После этого внутри фигурных скобок пишут инструкции, которые выполнятся, если условие истинно. Условие считается истинным, если инструкция внутри круглых скобок возвращает true.

else
Конструкция else (переводится как «иначе») говорит JavaScript, что делать, если условие ложно. Внутри фигурных скобок после else пишут инструкции, которые должны выполниться, если условие вернёт false.

Использование условных конструкций в скрипте ещё называют ветвлением, а код внутри фигурных скобок — веткой.

Метод append
элемент-родитель.append(добавляемый-элемент);
Метод append добавляет указанный в скобках элемент в конец элемента-родителя. При этом содержимое элемента-родителя не затирается. Добавлять с помощью этого метода можно и элементы, и простые строки.

Метод createElement
document.createElement('имя тега');
Чтобы создать новый элемент на странице, к которой подключён скрипт, нужно использовать слово document. Внутри скобок в кавычках указывают элемент, который нужно создать. Например:

// Создаём новый элемент <div> и записываем его в переменную
let newElement = document.createElement('div');
Новый элемент будет доступен из скрипта, но в разметке не появится, пока мы не скажем JavaScript, где разместить новый элемент. Для этого можно использовать метод append:

// Находим элемент-родитель
let parent = document.querySelector('.parent');

// Добавляем новый элемент на страницу
parent.append(newElement);
Элементы, созданные с помощью метода createElement, можно изменять так же, как и любые другие.

Очищаем поле ввода
Чтобы пользователь по ошибке не отправил форму несколько раз, после отправки поле ввода лучше очистить. Для этого в его свойство value записывают пустую строку. Вот так:

let input = document.querySelector('input');
input.value = '';



16 урок. 

Выпускной. Сложная была задача. Пришлось внимательно вникать в 14-ый урок, и копипастом, сделал.    



