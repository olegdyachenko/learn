Курс 3. Знакомство с JavaScript. Часть 3: Прокрутка и операторы


Урок 1. 

Закрыть
Обработчик событий onscroll
Мяу! Слишком долго скроллить страницу. Сделай кнопку «Наверх»!

Главная страница новостного сайта, над которым мы работали в стартовом тренажёре и прошлых частях, очень длинная. Если пользователь прочитал все новости и хочет вернуться к началу, ему надо долго прокручивать страницу. Кекс хочет, чтобы мы запрограммировали кнопку, которая прокрутит страницу наверх автоматически.

Кнопка изначально не видна и должна появиться, если пользователь прокрутил страницу больше, чем на 200px. Почему именно 200? А кот его знает! Если на кнопку нажали, страница должна прокрутиться к началу, а сама кнопка после этого — исчезнуть.

Чтобы выполнить задание босса, нам нужно знать, когда пользователь прокручивает страницу. JavaScript следит за всем, что происходит в окне браузера, в том числе за прокруткой. Мы можем сказать ему, что делать, если страницу прокрутили. Для этого используем обработчик событий onscroll. Он срабатывает каждый раз, когда страницу прокручивают, даже если её сдвинули всего на один пиксель.

Чтобы отслеживать прокрутку на новостном сайте, добавим обработчик событий окну мини-браузера. Окно (или вкладка) браузера в JavaScript обозначается словом window:

window.onscroll = function () {
  console.log('Страница прокручена');
}
Проверим, как работает обработчик onscroll.

Обработчик событий onscroll можно добавлять не только окну браузера, но и отдельным элементам на странице. Чтобы обработчик сработал, у элемента должна быть своя полоса прокрутки. Управлять прокруткой элемента можно с помощью CSS свойства overflow.


Урок 2. 

Свойство pageYOffset
Мы посмотрели, как работает обработчик событий onscroll. С его помощью мы можем отследить, когда пользователь прокручивает страницу. Кекс хочет, чтобы кнопка «Наверх» появлялась, если пользователь прокрутил больше 200px. Как узнать, на сколько пикселей прокрутили страницу?

Используем свойство pageYOffset окна браузера. Оно содержит число пикселей, на которое пользователь прокрутил страницу по вертикали:

// Если мы на самом верху страницы
console.log(window.pageYOffset); // Выведет: 0

// Прокрутим страницу на 200px
console.log(window.pageYOffset); // Выведет: 200

Величина горизонтальной прокрутки хранится в свойстве pageXOffset.


Урок 3.  

Показываем кнопку «Наверх»
Мы научились узнавать величину вертикальной прокрутки. Если пользователь прокрутил больше 200px, на странице должна появиться кнопка «Наверх». В разметке это элемент с классом up-button:

<button class="up-button" type="button">
  ↑
  <span class="visually-hidden">Наверх</span>
</button>
А вот так кнопка будет выглядеть в браузере:

↑
Найдём кнопку с помощью метода querySelector и запишем её в переменную.

Изначально кнопка не видна и должна появиться, если страница прокручена больше, чем на 200px. Чтобы определить, нужно ли показывать кнопку, добавим внутрь обработчика событий onscroll условную конструкцию и с помощью оператора сравнения «больше» сравним величину прокрутки с числом 200:

if (window.pageYOffset > 200) {
  // Если условие истинно, показываем кнопку
}
Чтобы кнопка появилась, ей нужно добавить класс shown. Используем для этого метод classList.add. Затем прокрутим страницу и убедимся, что кнопка «Наверх» появляется.

window.onscroll = function () {
  if (window.pageYOffset > 200) {
    upButton.classList.add('shown');
  }
};

Урок 4. 


Закрыть
Метод scrollTo
Мы сказали JavaScript показывать кнопку со стрелкой, если прокручено больше 200px. При клике на эту кнопку страница должна прокрутиться к началу. Пока этого не происходит. Как заставить страницу прокрутиться?

Используем метод scrollTo:

window.scrollTo(координата-Х, координата-Y);
Координата Х указывает, куда нужно прокрутить страницу по горизонтали, а координата Y — куда нужно прокрутить страницу по вертикали. Когда браузер выполнит инструкцию, указанная точка окажется в левом верхнем углу окна. Координаты задаются в пикселях, но указывать единицы измерения не нужно:

// Прокрутит страницу на 100px вправо и на 50px вниз
window.scrollTo(100, 50);
Как работает window.scrollTo(100, 50)
Если прокрутить страницу до указанных координат не получается, браузер прокрутит её так далеко, как сможет, но увеличивать страницу не будет. Если страница помещается в окно целиком и полосы прокрутки нет, то браузер проигнорирует эту инструкцию.

На новостном сайте, с которым мы работаем, нет горизонтальной прокрутки. Поэтому в координату Х мы запишем 0, а менять будем только координату Y.

Посмотрим, как работает метод scrollTo: скажем JavaScript сначала прокрутить страницу на 400px вниз, а после вернуть её к началу.


Урок 5. 

Закрыть
Прокручиваем страницу по клику
Отлично, мы научились прокручивать страницу с помощью JavaScript! Нам нужно, чтобы страница прокручивалась к началу, когда пользователь кликает на кнопку «Наверх».

Кнопку мы уже нашли, теперь нужно добавить ей обработчик событий onclick. После этого перенесём инструкцию со scrollTo внутрь обработчика и проверим, что при клике на кнопку страница прокручивается к началу.

По умолчанию автоматическая прокрутка в браузерах происходит очень быстро, скачком. Чтобы сделать её более плавной, мы использовали CSS свойство scroll-behavior со значением smooth. Подробнее об этом свойстве вы можете узнать из спецификации.


Урок 6. 

Завершаем работу над кнопкой «Наверх»
Мы добавили в скрипт обработчик событий onclick и убедились, что по клику на кнопку со стрелкой страница прокручивается к началу. Сама кнопка при этом не исчезает, хотя, когда пользователь находится на самом верху страницы, показывать её уже не нужно.

Чтобы кнопка пропала, у неё следует убрать класс shown. Делать это нужно, если величина вертикальной прокрутки не больше 200px. У нас уже есть условная конструкция, которая проверяет величину прокрутки и добавляет кнопке класс, если прокручено больше 200px. Добавим в условную конструкцию альтернативную ветку else: если условие ложно, то используем метод classList.remove, чтобы убрать у кнопки класс shown.

После этого убедимся, что страница прокручивается по клику на кнопку «Наверх», а сама кнопка исчезает.


Урок 7. 

Начинаем создавать фильтрацию на сайте
Мяу! Психологи рекомендуют ограничить потребление контента, поэтому сегодня я буду читать новости только про игры. На сайте нужен фильтр.

С психологами и Кексом не поспоришь, а значит, будем делать фильтр новостей. Верстальщик добавил на страницу раскрывающийся список, или «селект», в котором перечислены категории новостей. Когда пользователь выбирает категорию из списка, на странице должны остаться новости только из этой категории. Если выбрана опция «Все новости», то показать нужно новости из всех категорий.

Чтобы сделать фильтрацию, мы должны найти все новости на странице и сравнить категорию каждой из них с выбранным значением фильтра. Если они совпадают или если выбрана опция «Все новости», то новость нужно оставить на странице. А если категория новости и значение фильтра не совпадают, то новость нужно спрятать.

Такой способ сделать фильтрацию подходит, если значения фильтра и элементы, которые надо фильтровать, находятся прямо в разметке. Помните, что не существует универсальных решений, всё зависит от конкретной ситуации.

Итак, за дело!

Все новости на главной странице сайта имеют класс news-block. Найдём их и запишем полученную коллекцию в переменную. Убедимся, что нашли все новости — добавим всем элементам в коллекции временную подсветку и проверим, что она появилась у каждой новости на странице.

За подсветку отвечает класс highlight. Используем цикл for of, чтобы добавить его каждому элементу коллекции. В будущем мы используем этот класс, чтобы подсвечивать новости из разных категорий. Это облегчит отладку кода.


Урок 8. 

Оператор строгого равенства
Мы нашли все новости на странице и добавили им подсветку, которая поможет отладить код и настроить фильтрацию. Фильтровать новости мы будем по категориям. Категория каждой новости указана в её data-атрибуте:

<article class="news-block" data-category="games">
  …
</article>
Возможных значений у data-category четыре: 'games', 'IT', 'HR' и 'cats'. Такие же значения есть у фильтра. Когда пользователь выбирает категорию, мы должны сравнить значение атрибута новости с выбранным значением фильтра.

Мы уже умеем сравнивать два числа и узнавать, какое из них больше. А как узнать, что два значения равны друг другу? Используем оператор строгого равенства. Он обозначается тремя знаками равно:

'a' === 'a'; // Результат: true
'a' === 'b'; // Результат: false
Оператор строгого равенства сравнивает два значения и возвращает true, если они равны, и false, если они не равны. Значения, которые проверяет оператор, называют операндами.

Используем оператор строгого равенства, чтобы создать фильтрацию на новостном сайте. Добавим внутрь цикла условную конструкцию и будем сравнивать значение атрибута data-category каждой новости с одним из возможных значений фильтра. В результате подсветка добавится новостям только из одной категории.

В JavaScript также есть оператор нестрогого равенства — ==. О нём мы поговорим в одной из следующих частей.


Урок 9. 

Обработчик событий onchange
Мы научились добавлять класс новостям только из одной категории. Для этого мы сравнили значение data-атрибута каждой новости со строкой, которую прописали вручную. Но нам нужно сравнивать его с категорией, которую пользователь выбрал в фильтре. Тогда фильтрация будет происходить автоматически.

Фильтр на главной странице — это выпадающий список с категориями новостей.


Все новости
Пользователь может выбрать одну из предложенных категорий. Выбранное значение хранится в свойстве value самого списка.

// Находим выпадающий список
let select = document.querySelector('select');

// Выводим значение в консоль
console.log(select.value);
Нам нужно получать значение фильтра, когда пользователь выбирает новую категорию. Для этого используем обработчик событий onchange (переводится с английского как «при изменении»). Этот обработчик срабатывает, когда пользователь выбирает новое значение из выпадающего списка.

// Добавляем обработчик событий
select.onchange = function () {

  // Выводим в консоль новое значение
  console.log(select.value);
};
На новостном сайте фильтр — это элемент с классом filter. Найдём его, сохраним в переменную и добавим обработчик событий onchange. После этого скажем JavaScript выводить значение фильтра в консоль и по очереди выберем несколько категорий из списка.

Обработчик событий onchange можно использовать с разными элементами. Например, он срабатывает, когда пользователь переключает чекбокс или радиокнопки.


Урок 10. 

Добавляем класс новостям из выбранной категории
Мы научились получать значение фильтра в тот момент, когда пользователь переключает категорию. Чтобы фильтрация заработала, нам нужно сравнить полученное значение с категорией каждой новости на странице.

У нас уже написан цикл, который перебирает все новости и сравнивает категорию каждой из них со строкой. Перенесём этот цикл внутрь обработчика событий onchange и заменим произвольную строку на значение фильтра.

// До
for (let article of articles) {
  if (article.dataset.category === 'cats') {
    …
  }
}

// После
filter.onchange = function () {
  for (let article of articles) {
    if (article.dataset.category === filter.value) {
      …
    }
  }
};
Проверим, что всё работает: изменим значение фильтра и убедимся, что подсветка добавляется новостям из выбранной категории.


Урок 11. 

Оператор строгого неравенства
Отличная работа! Теперь подсветка добавляется новостям из той категории, которая выбрана в фильтре. Когда пользователь выбирает категорию из списка, новости из выбранной категории должны остаться на странице, а новости из всех других категорий — исчезнуть.

Чтобы новость со страницы пропала, ей нужно добавить класс hidden. Сейчас мы добавляем класс, отвечающий за подсветку, тем новостям, чьи категории совпадают со значением фильтра. А как сделать наоборот — добавить класс новостям, чьи категории отличаются? Используем оператор строгого неравенства. Он обозначается восклицательным знаком и двумя знаками равно:

'a' !== 'a'; // Результат: false
'a' !== 'b'; // Результат: true
Оператор строгого неравенства работает противоположно оператору строгого равенства. Если значения равны, он вернёт false, а если не равны, то true.

Продолжим создавать фильтрацию на новостном сайте. Изменим условие в конструкции if, чтобы цветная обводка добавлялась новостям из всех категорий, кроме выбранной. Потом заменим класс highlight, отвечающий за обводку, на класс hidden. Этот класс спрячет лишние новости. После этого проверим, что новости из невыбранных категорий действительно скрываются.

В JavaScript также есть оператор нестрогого неравенства — !=. О том, чем он отличается от оператора строго неравенства, мы поговорим в одной из следующих частей.


Урок 12. 

Закрыть
Показываем новости из выбранной категории
У нас получилось спрятать те новости, категория которых не совпадает со значением фильтра. Но есть проблема: если переключить фильтр несколько раз, то со страницы пропадут вообще все новости. Почему так происходит?

Дело в том, что мы сказали JavaScript, когда добавлять класс hidden, но не сказали, когда его убирать. Если значение фильтра изменилось, одни новости должны скрываться, а другие — снова показываться. Но пока мы новости только прячем.

Сделаем так, чтобы те новости, чья категория совпадает с новым значением фильтра, возвращались на страницу. Добавим в условную конструкцию ветку else: если условие ложно, то есть категория новости равна значению фильтра, то класс hidden у неё следует убрать. После этого несколько раз переключим фильтр и убедимся, что проблема исчезла.


Урок 13. 

Оператор логическое И
Фильтрация на новостном сайте практически готова: когда пользователь выбирает категорию из списка, на странице остаются новости только из этой категории. Но если выбрать опцию «Все новости», то не остаётся ни одной.

Разберём, почему так происходит. Каждой категории новостей соответствует такое же значение фильтра. Но категорий всего четыре, а возможных значений у фильтра — пять. Если выбрана опция «Все новости», то значение фильтра становится 'all'. На странице нет новостей с таким значением атрибута data-category, поэтому проверка на неравенство всегда возвращает true. В результате всем новостям добавляется класс hidden, и они пропадают со страницы.

// Когда значение фильтра 'all', проверка всегда возвращает true
if (article.dataset.category !== filter.value) {
  article.classList.add('hidden');
}
Как сказать JavaScript, что если выбрана опция «Все новости», то новости прятать не нужно? Добавим в конструкцию if ещё одно условие: значение фильтра не должно быть равно 'all'.

// Если категория НЕ равна фильтру И фильтр НЕ равен «Все новости»
if (article.dataset.category !== filter.value && filter.value !== 'all') {
  article.classList.add('hidden');
}
Двойным амперсандом && в JavaScript обозначается оператор логическое И. Он позволяет объединить две части условия.

Посмотрим, как это работает. Операторы строгого неравенства в нашем условии сравнивают значения и возвращают true или false. Если хоть один из операторов вернёт false, то благодаря логическому И условие целиком также будет считаться ложным:

true && true;   // Результат: true
true && false;  // Результат: false
false && true;  // Результат: false
false && false; // Результат: false
В результате класс hidden добавится новости, только если обе проверки на неравенство вернут true.

Доработаем нашу фильтрацию. Добавим в условие проверку, что значение фильтра строго не равно 'all', и используем логическое И, чтобы объединить две части условия. После этого убедимся, что всё работает правильно.

В JavaScript также есть оператор логическое ИЛИ. Он обозначается двумя вертикальными чертами и возвращает true, если хотя бы один из операндов возвращает true:

true || true;   // Результат: true
true || false;  // Результат: true
false || true;  // Результат: true
false || false; // Результат: false


Урок 14. КОНСПЕКТ
Конспект «Прокрутка и операторы»
Окно браузера и прокрутка
Окно (или вкладка) браузера в JavaScript обозначается словом window.

Обработчик событий onscroll
Чтобы отследить прокрутку, используем обработчик событий onscroll. Он срабатывает каждый раз, когда страницу прокручивают, даже если её сдвинули всего на один пиксель.

window.onscroll = function () {
  console.log('Страница прокручена');
}
Свойство pageYOffset
Свойство pageYOffset окна браузера содержит количество пикселей, на которое пользователь прокрутил страницу по вертикали:

// Если мы на самом верху страницы
console.log(window.pageYOffset); // Выведет: 0

// Прокрутим страницу на 200px
console.log(window.pageYOffset); // Выведет: 200
Свойство window.pageYOffset
Величина горизонтальной прокрутки хранится в свойстве pageXOffset.

Метод scrollTo
Чтобы прокрутить страницу, используем метод scrollTo:

window.scrollTo(координата-Х, координата-Y);
Координата Х указывает, куда нужно прокрутить страницу по горизонтали, а координата Y — куда нужно прокрутить страницу по вертикали. Когда браузер выполнит инструкцию, указанная точка окажется в левом верхнем углу окна. Координаты задаются в пикселях, но указывать единицы измерения не нужно:

// Прокрутит страницу на 100px вправо и на 50px вниз
window.scrollTo(100, 50);
Как работает window.scrollTo(100, 50)
Если прокрутить страницу до указанных координат не получается, браузер прокрутит её так далеко, как сможет, но увеличивать страницу не будет. Если страница помещается в окно целиком и полосы прокрутки нет, то браузер проигнорирует эту инструкцию.

Обработчик событий onchange
Обработчик событий onchange срабатывает, когда пользователь выбирает новое значение из выпадающего списка.

// Находим выпадающий список
let select = document.querySelector('select');

// Добавляем обработчик событий
select.onchange = function () {

  // Выводим в консоль новое значение
  console.log(select.value);
};
Обработчик событий onchange можно использовать с разными элементами. Например, он срабатывает, когда пользователь переключает чекбокс или радиокнопки.

Оператор строгого равенства
Чтобы проверить, равны ли два значения, используем оператор строгого равенства. Он обозначается тремя знаками равно:

'a' === 'a'; // Результат: true
'a' === 'b'; // Результат: false
Оператор строгого равенства сравнивает два значения и возвращает true, если они равны, и false, если они не равны. Значения, которые проверяет оператор, называют операндами.

Оператор строгого неравенства
Оператор строгого неравенства работает противоположно оператору строгого равенства. Он сравнивает два значения и возвращает false, если значения равны, и true, если они не равны.

Оператор строгого неравенства обозначается восклицательным знаком и двумя знаками равно:

'a' !== 'a'; // Результат: false
'a' !== 'b'; // Результат: true
В JavaScript также есть оператор нестрогого равенства == и оператор нестрогого неравенства !=. О них мы поговорим в одной из следующих частей.

Оператор логическое И
Чтобы объединить две части условия, используем логическое И. Оно обозначается двойным амперсандом — &&.

if (article.dataset.category !== filter.value && filter.value !== 'all') {
  article.classList.add('hidden');
}
Логическое И возвращает true, только если обе части условия возвращают true. Если хотя бы одна из частей вернёт false, то условие целиком также будет считаться ложным:

true && true;   // Результат: true
true && false;  // Результат: false
false && true;  // Результат: false
false && false; // Результат: false
Оператор логическое ИЛИ
Логическое ИЛИ обозначается двумя вертикальными чертами и возвращает true, если хотя бы один из операндов возвращает true:

true || true;   // Результат: true
true || false;  // Результат: true
false || true;  // Результат: true
false || false; // Результат: false

Логотип HTML Academy
Наша группа в ВК
Наша группа в Facebook
Наша страница в Twitter
Наша страница в Instagram
Наш канал в Telegram
Инновационный центр Сколково
Практикум
Тренажёры
Подписка
Для команд и компаний
Учебник по PHP
Профессии
Фронтенд-разработчик
React-разработчик
Бэкенд-разработчик
Курсы
HTML и CSS. Профессиональная вёрстка сайтов
HTML и CSS. Адаптивная вёр


УРОК 15. ИСПЫТАНИЕ


let radioBut = document.querySelectorAll('.review');
let submitBut = document.querySelector('.submit-button');
let error = document.querySelector('.error');


for(let button of radioBut){
button.onchange = function() {
  if(button.dataset.evaluation == 'bad'){
      submitBut.disabled = true;
      error.classList.add('shown');
    }else{
      submitBut.disabled = false;
      error.classList.remove('shown');
    }
  }
}
/*