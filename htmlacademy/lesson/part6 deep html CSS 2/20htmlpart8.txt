Курс 6. Продвинутый HTML и CSS. Часть 1: Возможности HTML и CSS


Урок 1. 
Закрыть
Теги header и footer, хедер и футер
В этой вводной части мы обзорно пройдём по теме HTML и CSS, освежим в памяти то, что уже изучили раньше, а также познакомимся с новыми возможностями.

Для этого мы пошагово соберём блог известного вам веб-разработчика.

Начнём с «шапки» и «подвала» сайта. Разметим их тегами <header> и <footer>.

<header> — хедер сайта или раздела;
<footer> — футер сайта или раздела.
Да-да, это те самые хедер и футер, которые раньше верстались дивами с классами header или footer.

Урок 2. 
Тег main, основное содержание
Обратите внимание, что мы задали классы для хедера и футера. Сделано это потому, что этих элементов на странице может быть несколько.

Хедер — это не только привычная шапка сайта с логотипом и меню, он может использоваться и как «шапка» какой-нибудь статьи или раздела сайта. Конечно, в этом случае хедер называют не «шапкой», а вводной частью, в которой могут содержаться заголовки, оглавление и так далее.

С футером ситуация аналогичная. В привычном нам понимании это «подвал» сайта, с копирайтами, контактной информацией и так далее. Но футер может использоваться и в других разделах сайта. Например, в футере статьи можно разместить дополнительную информацию: данные об авторе, дополнительные ссылки и так далее.

А раз теги не уникальные, то и стилизовать их лучше с помощью классов, как мы и сделали.

Если вы не хотите использовать классы для шапки и подвала сайта, то можете использовать селекторы body > header и body > footer. Эти селекторы не повлияют на хедеры и футеры, вложенные более глубоко.

Для разметки основного содержимого используем тег <main>. Для его стилизации класс использовать не будем, так как на сайте будет только одно единственное основное содержимое.

Кстати, загляните в CSS и посмотрите, как сделаны фоны для основных блоков. В хедере и футере мы использовали линейные градиенты, которые детально разберём в более позднем тренажёре. А фоновую картинку для основного содержания мы задали с помощью так называемого data:URI. Это не опечатка, аббревиатура URI расшифровывается как Uniform Resource Identifier. Кодирование изображения прямо в CSS-коде — это одна из продвинутых техник оптимизации вёрстки.


Урок 3.  

Теги article и section, разделы страницы
С шапками, подвалами и основным содержанием разобрались. Теперь перейдём к остальным разделам сайта.

Разметим разделы «Обо мне» и «Последние посты». Используем для этого теги <section> и <article>:

<section> — смысловой или логический раздел документа;
<article> — самостоятельный и независимый раздел документа.
Чтобы не было путаницы, разберём где и когда использовать разные контейнеры:

<div> — контейнер общего назначения, не обязательно смысловой. Дивы используются для разметки мелких блоков, создания сетки и декоративных эффектов.
<section> — более крупный логический контейнер, объединяющий содержание по смыслу. Например, блок «О компании», список товаров, раздел личной информации в профиле и так далее.
<article> — самостоятельный, цельный и независимый раздел документа. Этот раздел можно в неизменном виде использовать в различных местах, в том числе и на других сайтах. Примеры: статья, пост в блоге, сообщение на форуме и так далее.
В этом задании мы сверстаем блок «Обо мне» как независимый раздел, который можно будет использовать в разных местах сайта. А список постов — это логический раздел, группирующий последние посты, поэтому для него используем <section>.


Урок 4. 

Теги h1-h6, заголовки разделов страницы
Как мы уже разбирали ранее, для структурирования текстового содержания важно правильно озаглавить основные разделы документа.

Как правило, в разделы <section> и <article> включают заголовки, резюмирующие содержимое разделов.

Всего может быть шесть уровней заголовков. Размечаются они тегами <h1>, <h2> … <h6>. А как правильно определить нужный уровень заголовков?

При озаглавливании разделов учитывается общая иерархия текстового содержимого страницы: сначала определяется, о чём эта страница целиком, какие разделы документа более крупные, какие — дополнительные. В итоге заголовки должны из себя представлять явное дерево: от главного <h1> на странице до структурно следующих за ним <h2>, <h3> и так далее.

Пример:

h1 — Интернет-магазин зоотоваров «Усы, лапы и хвост»
h2 — Список товаров
h2 — Похожие предложения
h3 — Когтеточка «Росомаха»
h3 — Палка с пером «Шерстяной охотник»
…
Если в дизайне страницы у раздела не предусмотрен заголовок, его всё равно следует добавлять в разметку. При этом с помощью стилей заголовки можно «визуально спрятать», но оставить доступным их содержимое. Подробнее об этом рассказывается в Шорте «Как прятать».

https://htmlacademy.ru/blog/boost/frontend/short-12

Урок 5. 
Изображения в формате SVG
Мы разметили базовые разделы нашей страницы. Теперь поработаем над каждым из них и начнём с шапки сайта.

Давайте добавим нашему сайту логотип. Для этого добавим в хедер <div>, а внутри него разместим привычное изображение. Используем картинку в векторном формате SVG. Векторные изображения можно уменьшать и увеличивать без потери качества, в этом вы убедитесь в задании.

Кстати, обратите внимание на полупрозрачный фон в блоке «Обо мне». Он сделан с помощью rgba-формата записи цветов в CSS.

Урок 6. 

Закрыть
Тег nav, основная навигация
Теперь давайте добавим в шапку главное меню.

Как вы помните из прошлой части, в HTML есть специальный элемент для навигационных блоков — тег <nav>. Так что меню и блоки ссылок лучше оборачивать не в дивы, а в навы.

В случае, когда навигация шапки дублируется в подвале сайта, не рекомендуется использовать тег <nav> повторно. Достаточно будет использовать список со ссылками.


Урок 7. 

Закрыть
Завершаем футер
Теперь перейдём к доработке подвала сайта. Там нет ничего сложного: для стилизации нужно добавить пару контейнеров-обёрток. Использовать <section> в этом случае избыточно, дивы нужны только для создания сетки и оформления.

Обратите внимание на то, как повернётся изображение автора блога. Это сделано с помощью CSS-трансформаций, которые мы детально разберём в одной из последующих частей.

Урок 8.

Использование нестандартных шрифтов
Перед тем как продолжить работу над сайтом, давайте разберёмся со шрифтами.

В HTML и CSS есть возможность подключать и использовать на странице нестандартные шрифты. Простейший способ использовать такой шрифт — найти его в специальном сервисе по названию, получить там код подключения шрифта, вставить этот код в свою вёрстку и использовать шрифт, как обычно, с помощью свойства font-family.

Подобных сервисов с бесплатными шрифтами достаточно много. Один из самых известных — это Google Fonts. А вот похожий сервис: fontstorage.

При использовании веб-шрифтов не забывайте указывать так называемые «фоллбэк»-шрифты — стандартные шрифты, которые будут отображаться, если веб-шрифт либо недоступен, либо не поддерживается старым браузером пользователя. Для этого нужно всего лишь перечислить их через запятую после нестандартного шрифта:

font-family: "PT Sans", "Arial", sans-serif;
Потренируемся подключать и использовать веб-шрифты.


Урок 9. 

Подробнее о шрифтах: правило @font-face
Технически подключение веб-шрифтов производится с помощью CSS-правила @font-face. Читается как «эт-правило font-face». Вот пример:

@font-face {
  font-family: "Roboto";
  src:
    local("Roboto Regular"),
    url("roboto.woff") format("woff");
}
В этом правиле вы указываете название шрифта, которое будете использовать в font-family и источники, из которых браузер сможет загрузить шрифт. Обычно сначала указывают название шрифта в системе, чтобы браузер попытался найти его локально на компьютере пользователя, а затем указывают адрес файла шрифта в интернете.

Более подробно о технических тонкостях подключения шрифтов можно прочитать в серии статей на fontstorage: первая часть и вторая часть.

Получается, что можно хранить шрифты и подключать их со своего сервера. Это особенно полезно, когда шрифт очень редкий и его нет ни в одном из шрифтовых сервисов. В этом случае поступают так:

Берут файл шрифта (например, .ttf) и конвертируют в веб-формат в сервисе наподобие Font Squirrel (для кириллических шрифтов надо указать дополнительные параметры конвертации).
Затем сконвертированные файлы шрифта размещают у себя на сервере.
И подключают шрифт с помощью @font-face.
Сейчас мы подключим шрифт, который расположен на сервере htmlacademy. Мы уже сконвертировали шрифт в веб-формат.

https://fontstorage.com/blog/about-font-face-part-one/


Урок 10. 

Тег aside, дополнительное содержание
Теперь продолжим работу над страницей блога. Детальнее разметим раздел «Обо мне».

Этот раздел состоит из двух частей. В первой части будет содержаться основная информация, а во второй вспомогательная. Поэтому основную часть мы разметим с помощью уже знакомого <section>. А вторую часть разметим с помощью тега <aside>.

<aside> — это дополнительное содержание, не связанное напрямую с основным. Ещё такие блоки часто называют «сайдбарами» или боковыми панелями.


Урок 11. 

Закрыть
Ещё раз про article: анонс поста
Теперь добавим пост в блок с последними постами.

Пост — это цельный, законченный и самостоятельный фрагмент информации. Для его разметки идеально подойдёт тег <article>.

Так как <article> должен быть независимым, то при разметке удобно считать его отдельной и самостоятельной страницей сайта. При этом иерархия заголовков на всей нашей странице должна быть «сквозная», то есть внутри <article> заголовок будет «очередного» уровня. Заголовок родительского раздела <section> у нас второго уровня — h2, значит внутри <article> нужен заголовок третьего уровня — h3.


Урок 12. 

Закрыть
Завершаем главную: наполнение
Это задание самое простое. Мы наполним подготовленную в предыдущих шагах разметку настоящим содержанием и посмотрим на готовую страницу.

На этом первая серия заданий завершается. Во второй серии заданий мы будем размечать внутренние страницы блога с самими постами и разберём ещё несколько новых элементов.


Урок 13. 

Закрыть
Внутренняя страница: структура поста
В этом задании мы начинаем работу над внутренними страницами блога, то есть над самими постами.

Первым делом нам нужно разметить базовую структуру поста. Она будет похожа на ту, которую мы делали в прошлом задании. Но будут и небольшие различия, ведь на главной странице был анонс поста, а здесь пост целиком.

Как вы уже догадались, в качестве контейнера поста мы используем <article>. У каждого поста будет заголовок и дата публикации, а также блок введения и блок с основным содержанием. Не будем переусложнять структуру разметки — дополнительно добавим только два <div> для оформления.

Урок 14. 

Закрыть
Тег time, дата и время для людей и машин
В этом задании мы добавим в пост дату и наполним его настоящим содержанием.

В HTML есть специальный тег для обозначения даты и времени — <time>. С помощью <time> можно описывать даты одновременно и для человека, и для машины, например:

<time datetime="2014-04-20">Вчера</time> мы готовили тренажёр к публикации.
Браузер отображает только содержимое тега, а содержимое datetime не отображается. Человек увидит только слово «вчера», а машина прочитает атрибут и получит дату в нужном ей формате. И все довольны.

Подробно про <time> уже рассказывалось в прошлой части.


Урок 15. 



Закрыть
Теги figure и figcaption, картинки с подписями
Теперь, когда шаблон поста готов, можно добавить в блог ещё несколько коротких записей. А начнём с фотопоста.

Для его разметки используем тег <figure> — он обозначает цельный и независимый блок содержания. Внутри этого тега размещают демонстрационный материал: изображения, схемы, куски кода и так далее.

Обычно каждый такой материал сопровождает разъясняющий комментарий или «легенда». Для обозначения этого комментария и предназначен ещё один новый тег — <figcaption>, который размещается первым или последним элементом внутри <figure>. Пример:

<figure>
  схема,
  график,
  диаграмма
  и так далее
  <figcaption>Легенда</figcaption>
</figure>
Подробно про <figure> уже рассказывалось в прошлой части.

Мы используем этот тег для более прозаичных целей.


Урок 16. 
Закрыть
Тег video, видео
В HTML с самого начала было очень просто вставлять изображения, но очень сложно видео и аудио. Сейчас эта проблема решена.

Для вставки видео предназначен специальный парный тег <video>. Его основные атрибуты:

width и height	задают ширину и высоту видео
controls	пустой атрибут, при наличии которого отображается панель управления видео
preload	задаёт режим предзагрузки видео, имеет 3 возможных значения:
none — не загружать ничего;
metadata — загрузить служебную мета-информацию (длительность, первый кадр и так далее);
auto — можно загрузить всё видео.
значение по умолчанию зависит от браузера
src	задаёт адрес видеофайла
autoplay	пустой атрибут, при наличии которого воспроизведение видео начинается автоматически
poster	задаёт адрес картинки-обложки, которая отображается, когда видео ещё не загрузилось или не воспроизводится

Урок 17.

Форматы и источники видео
У тега <video> есть атрибут src, в котором можно указать адрес видеофайла, но мы почему-то его не использовали.

Всё дело в том, что в текущий момент существует несколько форматов видео, каждый из которых хорошо поддерживается лишь некоторыми браузерами. Вот три самых распространённых формата и их поддержка:

MPEG-4/H.264
OGG/Theora
WebM
Поэтому мы должны в видео указывать адреса файлов во всех этих форматах (и конвертировать исходное видео в эти форматы, конечно). Делается это с помощью тегов <source>:

<video controls>
  <source src="video.mp4" type="video/mp4">
  <source src="video.ogv" type="video/ogg">
  <source src="video.webm" type="video/webm">
</video>
В атрибуте src указывается адрес видеофайла, а в атрибуте type его тип (также там могут указываться и кодеки). Браузер из списка видеофайлов выбирает первый, который может проиграть и загружает его.

Атрибут type не является обязательным, так как браузер умеет сам определять тип и кодеки, но указывая тип явно, мы помогаем ему не ошибиться.


Урок 18.
Закрыть
Тег audio, аудио
Работа с аудио в HTML очень похожа на работу с видео, только у тега для аудио чуть меньше параметров.

Для вставки звука предназначен тег <audio>. Его основные атрибуты:

controls	пустой атрибут, при наличии которого отображается панель управления проигрывателем
preload	задаёт режим предзагрузки аудио, имеет 3 возможных значения:
none — не загружать ничего;
metadata — загрузить служебную мета-информацию;
auto — можно загрузить весь файл.
значение по умолчанию зависит от браузера
src	задаёт адрес аудиофайла
autoplay	пустой атрибут, при наличии которого воспроизведение звука начинается автоматически

Урок 19.

Форматы и источники звука
У звуковых файлов с поддержкой форматов дела обстоят лучше, чем у видео.

Для охвата большинства современных браузеров, достаточно использовать всего два формата:

MP3
OGG
И снова мы не можем указать только один файл в атрибуте src у тега <audio>. Мы должны так же, как и в случае с видео, перечислить адреса звуковых файлов в разных форматах с помощью тегов <source>:

<audio controls>
  <source src="sound.mp3" type="audio/mpeg">
  <source src="sound.oga" type="audio/ogg">
</audio>
Теги <source> в аудио работают так же, как и в видео.

Урок 20.

Конспект «Возможности HTML и CSS»
HTML5
Чтобы использовать HTML5, нужно задать правильный тип документа:

<!DOCTYPE html>
header и footer
<header> — это не только привычная шапка сайта с логотипом и меню, но и «шапка» какой-нибудь статьи или раздела сайта, в которой могут содержаться заголовки, оглавление и так далее.

<footer> — это подвал сайта: с копирайтами, контактной информацией и так далее. Но может использоваться и в других разделах сайта, например в статье, чтобы разместить дополнительную информацию: данные об авторе, дополнительные ссылки и так далее.

main
Тег <main> обозначает основное содержание сайта и по спецификации может использоваться на странице только один раз.

article и section
Где и когда использовать разные контейнеры:

<div> — контейнер общего назначения, не обязательно смысловой. Дивы используются для разметки мелких блоков, создания сетки и декоративных эффектов.
<section> — более крупный логический контейнер, объединяющий содержание по смыслу. Например, блок «О компании», список товаров, раздел личной информации в профиле и так далее.
<article> — самостоятельный, цельный и независимый раздел документа. Этот раздел можно в неизменном виде использовать в различных местах, в том числе и на других сайтах. Примеры: статья, пост в блоге, сообщение на форуме и так далее.
nav
Тег <nav> — специальный элемент для навигационных блоков. Меню и блоки ссылок лучше оборачивать не в дивы, а в навы.

aside
<aside> — это дополнительное содержание, не связанное напрямую с основным. Ещё такие блоки часто называют «сайдбарами» или боковыми панелями.

time
<time> — специальный тег для обозначения даты и времени. У этого тега есть атрибут datetime — для указания даты в машиночитаемом формате ISO 8601. Содержимое datetime не отображается.

<time datetime="2014-04-20">Вчера</time> мы готовили тренажёр к публикации.
figure и figcaption
<figure> — цельный и независимый блок содержания. Внутри этого тега размещают демонстрационный материал: изображения, схемы, куски кода и так далее.

<figcaption> — разъясняющий комментарий, или «легенда». Размещается первым или последним элементом внутри <figure>. Пример:

<figure>
  схема,
  график,
  диаграмма
  и так далее
  <figcaption>Легенда</figcaption>
</figure>
video
Парный тег <video> предназначен для вставки видео. Его основные атрибуты:

width и height — задают ширину и высоту видео;
controls — пустой атрибут, при наличии которого отображается панель управления видео;
preload — задаёт режим предзагрузки видео, имеет 3 возможных значения:
none — не загружать ничего;
metadata — загрузить служебную мета-информацию (длительность, первый кадр и так далее);
auto — можно загрузить всё видео.
src — задаёт адрес видеофайла;
autoplay — пустой атрибут, при наличии которого воспроизведение видео начинается автоматически;
poster — задаёт адрес картинки-обложки, которая отображается, когда видео ещё не загрузилось или не воспроизводится.
Разные браузеры поддерживают разные форматы, поэтому лучше указывать адреса файлов в нескольких форматах. Делается это с помощью тегов <source>:

<video controls>
  <source src="video.mp4" type="video/mp4">
  <source src="video.ogv" type="video/ogg">
  <source src="video.webm" type="video/webm">
</video>
В атрибуте src указывается адрес видеофайла, а в атрибуте type его тип (также там могут указываться и кодеки). Браузер выбирает из списка видеофайлов первый, который может проиграть, и загружает его.

audio
Тег <audio> предназначен для вставки звука. Его основные атрибуты:

controls — пустой атрибут, при наличии которого отображается панель управления проигрывателем;
preload — задаёт режим предзагрузки аудио, имеет 3 возможных значения:
none — не загружать ничего;
metadata — загрузить служебную мета-информацию;
auto — можно загрузить весь файл.
src — задаёт адрес аудиофайла;
autoplay — пустой атрибут, при наличии которого воспроизведение звука начинается автоматически.
Лучше указывать адреса файлов в нескольких форматах. Для этого используют теги <source>:

<audio controls>
  <source src="sound.mp3" type="audio/mpeg">
  <source src="sound.oga" type="audio/ogg">
</audio>
Шрифты
Есть возможность подключать и использовать на странице любые нестандартные шрифты. Подключение веб-шрифтов производится с помощью CSS-правила @font-face. Например:

@font-face {
  font-family: "Roboto";
  src:
    local("Roboto Regular"),
    url("roboto.woff") format("woff");
}
Нужно указать название шрифта, которое вы будете использовать в font-family, и источники, из которых браузер сможет загрузить шрифт. Сначала указывают название шрифта в системе, чтобы браузер попытался найти его локально, а затем указывают адрес файла шрифта в интернете.

Если шрифт очень редкий и его нет ни в одном из шрифтовых сервисов, поступают так:

Берут файл шрифта (например, .ttf) и конвертируют в веб-формат в сервисе наподобие Font Squirrel (для кириллических шрифтов надо указать дополнительные параметры конвертации).
Затем сконвертированные файлы шрифта размещают у себя на сервере.
И подключают шрифт с помощью @font-face.
SVG
SVG — векторный формат, который хорошо поддерживается браузерами. Векторные изображения можно уменьшать и увеличивать без потери качества.


Урок 21.
Урок 22.
