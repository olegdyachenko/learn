Курс 6. Продвинутый HTML и CSS. Часть 4: Формы. Погружение


Урок 1. 

Сброс введенных значений
Сначала разберёмся с возможностями кнопок, не рассмотренными в базовой части про формы.

Экспериментировать будем над формой логина в котопрофайл.

В HTML-формах есть специальная кнопка, которая сбрасывает введённые значения и возвращает изначально установленные. Это поле ввода с типом reset.

Пример использования:

<input type="reset" value="Сбросить">
Обратите внимание, что кнопка не обнуляет значения, а возвращает те, которые были установлены в полях формы по умолчанию.

Урок 2. 

Простая кнопка
Помимо кнопок отправки формы или сброса введенных значений, существуют и «просто кнопки». При нажатии на такую кнопку никаких действий не происходит, а все необходимые действия обычно задаются при помощи JavaScript.

Пример записи:

<input type="button" value="Кнопка">


Урок 3.  

Кнопка-изображение
В качестве кнопки отправки формы можно использовать изображение.

Для этого у тега input нужно указать тип image.

Аналогично обычным изображениям на сайте у кнопки-изображения есть еще два атрибута:

src	адрес изображения
alt	альтернативный текст, отображаемый в том случае, если изображение не загружено
Кнопка-изображение работает аналогично кнопке submit, но на сервер дополнительно передаются координаты точки, по которой был произведен щелчок.


Урок 4. 


Закрыть
Альтернативный способ задания кнопок
Помимо тега <input> для добавления кнопок можно использовать тег <button>. Он расширяет возможности создания кнопок.

Внутри тега <button> можно размещать любые HTML-элементы, в том числе изображения. Например:

<button>Календарь <img src="calend.png" alt=""></button>
В данном случае кнопка будет выглядеть примерно вот так: Кнопка

Если в атрибуте type тега <button> указать значение submit или reset, то кнопка будет отправлять данные на сервер или сбрасывать введенные значения.

По умолчанию значение атрибута type — submit.

То есть внутри формы кнопка <button> по нажатию отправит форму на сервер.

Значениями атрибута type также могут быть button и reset.

Кнопка button со значением type="reset" аналогично input type="reset" сбрасывает значения полей формы к изначальным.

А вот значение type="button" избавит кнопку от всей изначальной функциональности. То есть кнопка просто будет выглядеть как кнопка, но ничего по умолчанию не делать. Это удобно, если вы хотите сами добавить кнопке дополнительное действие с помощью JavaScript.


Урок 5. 


Обязательные поля
Ура, товарищи! Мы успешно разобрались с возможностями кнопок в формах и залогинились в профайл Кексика.

Теперь нам предстоит изучить новые возможности форм, большая часть которых была добавлена в HTML5. А в процессе мы будем помогать Кексику строить формы, используя полученные знания.

Итак, начнём…

Кексик, как и любой уважающий себя кот, любит рыбу. Но при этом каждый раз ходить в рыбную лавку за лососем ему лень. Поэтому он, как уважающий себя инженер, решил облегчить свою жизнь автоматизацией процесса: он собрался сделать форму доставки любимых лакомств на дом, чтобы ей мог пользоваться он сам и его друзья-котаны. Кексик начал её верстать, и ему надо помочь в этом нелёгком деле.

Сначала давайте разберёмся с обязательными полями. Чтобы указать, что поле обязательно для заполнения, нужно добавить ему пустой атрибут required:

<input type="text" required>
При попытке отправить форму с незаполненными обязательными полями браузер выведет всплывающее предупреждение, которое в Chrome и Firefox выглядит вот так:

Обязательное поле в ChromeОбязательное поле в Firefox

Эта проверка работает на клиентской части и упрощает валидацию форм.
Но всегда нужно проверять отправленные данные и на стороне сервера.


Урок 6. 

Поле выбора даты
Поля для задания даты и времени уже поддерживаются в этих браузерах.
В форму заказа важно включить поле даты доставки. А для выбора даты из календаря существует новый тип поля ввода — date. При клике на данное поле в форме всплывает календарик.

Пример записи:

<input type="date">
В Chrome это выглядит так:

Поле выбора даты в Chrome

Если браузер не поддерживает поле для ввода даты, то вместо него отображается обычное текстовое поле.


Урок 7. 

Поле выбора времени
Поля для задания даты и времени уже поддерживаются в этих браузерах.
В предыдущем задании мы рассмотрели использование тега <input> с типом date. Но иногда нужно указывать дату в других форматах, и для этого существуют дополнительные «временные» типы полей, например, time для выбора времени.

Используем поле выбора времени в нашей форме:

<input type="time">
В Chrome это выглядит так:



Если браузер не поддерживает поле для ввода времени, то вместо него отображается обычное текстовое поле.


Урок 8. 

Закрыть
Список возможных значений
Списки возможных значений уже поддерживаются в этих браузерах.
Для текстовых полей можно заранее определить список возможных значений, которые отображаются, когда вы начинаете вводить текст в поле. Для этого существует специальный тег <datalist>.

Пример использования:

<input type="text" list="browsers" name="browser">

<datalist id="browsers">
  <option value="Firefox"></option>
  <option value="Chrome"></option>
  <option value="Safari"></option>
</datalist>
В Chrome это выглядит так:

Список возможных значений в Chrome

Связывание текстового поля и списка осуществляется при помощи атрибута list у тега input — значение list должно быть таким же, как значение атрибута id у списка.

Если тег input имеет специфический тип, например email или другие, которые будут рассмотрены далее в тренажёре, то в списке отображаются только корректные для данного типа значения.


Урок 9. 

Поле ввода числового значения
Поля для ввода числовых значений уже поддерживаются в этих браузерах.
Для ввода числовых значений существует специальный тип поля ввода number. Рядом с полем браузер автоматически подставляет две стрелочки для увеличения и уменьшения числового значения.

Пример записи:

<input type="number">
В Chrome это выглядит так:

Поле ввода числового значения в Chrome

При помощи вспомогательных атрибутов min и max можно установить верхнюю и нижнюю границу допустимых значений. А атрибут step устанавливает величину шага изменения значения.

Также стоит отметить, что поле ввода числа, как и некоторые другие поля, которые будут рассмотрены дальше, по-особому ведёт себя в мобильных браузерах: например, при фокусе на такое поле появляется клавиатура, позволяющая вводить соответствующие символы.

Урок 10. 

Поле поиска
Отлично! Мы справились с формой заказа и можем смело двигать дальше.

Кексик давно намеревался побывать в Норвегии и отведать хвалёной местной рыбки. Чтобы упростить себе жизнь и не ходить в турфирму, он решил создать страницу с формой бронирования отеля.

И тут без вашей помощи никак не обойтись.

Первым делом в форму нужно поместить поле поиска, чтобы можно было напечатать название города и потом выбирать подходящие отели.

Пример записи:

<input type="search">
Это поле почти не отличается от обычного текстового поля. В некоторых браузерах внутри него появляется крестик для сброса введённого значения.

В Chrome это выглядит так:

Урок 11. 

Автофокус
Автофокус уже поддерживается в этих браузерах.
При загрузке страницы можно сообщить браузеру в какое поле установить курсор по умолчанию. Для этого используется пустой атрибут autofocus.

Пример записи:

<input type="text" autofocus>
Автофокус улучшает процесс работы с формами, ведь пользователь избавляется от лишних щелчков мышки, там где они не нужны, а может сразу начинать вводить текст в поле.

Обратите внимание, что такой атрибут должен быть только один на странице.


Урок 12. 


Другие поля для ввода дат
Поля для задания даты и времени уже поддерживаются в этих браузерах.
В предыдущих заданиях мы уже использовали поля с типами date и time, но существуют и другие типы полей для ввода дат:

datetime-local	выбор даты с указанием времени (без учета временной зоны)
week	выбор порядкового номера недели в году и года
month	выбор месяца и года
Используем поле для выбора месяца в нашей форме. А для выбора числа используем уже знакомый тип number.

Вот так выбор месяца выглядел в Chrome, когда создавалась эта часть:

Поле для выбора даты в Chrome

Если браузер не поддерживает поле для ввода месяца, то вместо него отображается обычное текстовое поле.


Урок 13. 

Выбор из диапазона
Поле для выбора из диапазона значений уже поддерживаются в этих браузерах
В нашей форме обязательно должна быть возможность выбрать количество дней, на которое будет осуществляться бронирование. Для этой цели подходит тип поля range.

Такое поле выглядит как шкала с ползунком и позволяет выбрать число из некоторого интервала значений.

Пример записи:

<input type="range" min="1" max="10">
В Chrome и Firefox это поле выглядит так:

Поле выбора из диапазона в ChromeПоле выбора из диапазона в Firefox

Атрибуты min и max устанавливают нижнюю и верхнюю границу допустимых значений. А атрибут step устанавливает величину шага изменения значения.


Урок 14. 

Чтобы видеть количество дней в брони, используем тег <output>.

Тег <output> представляет собой область, куда выводятся какие-либо результаты вычислений, обычно полученные при помощи JavaScript.

Пример записи:

<output name="sum">[значение по умолчанию]</output>
Значение по умолчанию при этом можно не задавать, тогда область вывода будет пустой.

В этом задании мы добавим в форму область вывода, в которой будет отображаться количество дней, выбранное с помощью поля-ползунка.


Урок 15. 


Группировка полей формы
Когда формы становятся очень большими, возникает потребность зрительно отделить одни поля от других. Для группировки полей используется тег fieldset.

Пример:

<fieldset>
  <input type="text">
  <input type="text">
  <input type="text">
</fieldset>
<fieldset>
  <textarea></textarea>
</fieldset>
По умолчанию браузеры отображают результат в виде рамки вокруг этой группы полей, но при помощи CSS можно изменить его внешний вид.

Также для каждой группы можно добавить её заголовок. Для этого внутрь тега fieldset надо поместить тег legend:

<fieldset>
  <legend>Заголовок группы</legend>
  <input type="text">
</fieldset>


Урок 16. 


Закрыть
Паттерны значений полей
Паттерны значений полей уже поддерживаются в этих браузерах.
Итак, у нас готова форма бронирования отеля, но чтобы отправиться в Норвегию, Кексику нужно получить визу.

Естественно, ему лень идти в консульство и лично предъявлять там усы, лапы и хвост, поэтому он решает создать ещё одну форму, которая сможет отправить все необходимые данные по получению визы прямиком в лапы норвежского посла.

Ни для кого не секрет, что основным кошачьим документом является котопаспорт, в котором зафиксированы окрас кота, его личные данные и гастрономические предпочтения.

Поэтому первым делом добавим в форму поле для номера котопаспорта. Это обычное текстовое поле, но с ограничениями на формат номера, чтобы не злить лишний раз норвежского посла ошибками и опечатками.

Чтобы добавить автоматическую проверку формата номера в поле, используем атрибут pattern, в котором с помощью регулярного выражения опишем требуемый формат.

В Chrome и Firefox подобное поле с неправильно введёнными данными выглядит так:

Поле с неправильно введёнными данными в ChromeПоле с неправильно введёнными данными в Firefox

Подробнее о регулярных выражениях можно почитать, например, на Википедии.


Урок 17.

Поле ввода телефона
Для получения визы нужно сообщить и номер телефона Кексика, поэтому добавим в форму ещё одно поле с типом tel.

Новый тип поля tel появился в HTML5 и отвечает за ввод телефонных номеров.

Также воспользуемся атрибутом pattern, чтобы исключить ошибки при заполнении формы.

В мобильных браузерах при фокусе на такое поле появляется клавиатура, позволяющая вводить только цифры и символы телефонных номеров.


Урок 18.

Подсказка при заполнении полей
У полей, в которые вводятся текстовые значения (textarea, разные типы input и так далее) есть возможность вывести подсказку.

Для этого используется специальный атрибут placeholder:

<input type="text" placeholder="Текст подсказки">
Текст подсказки выводится внутри текстового поля, а при вводе значения — автоматически убирается.

Воспользуемся этим атрибутом, чтобы подсказывать в каком именно формате следует вводить номера котопаспорта и телефона.

Урок 19.


Поля ввода адресов сайтов и email
Вот поддержка браузерами полей для ввода email и полей для ввода адресов сайтов
В HTML5 добавлены два типа полей email и url, предназначенные для ввода электронной почты и адреса сайта. Особенностью этих полей является то, что они автоматически проверяют формат введённых данных.

Пример записи:

<input type="email">
<input type="url">
Внешне эти поля не отличаются от обычных текстовых полей, но обладают важной особенностью, которая очень полезна на мобильных устройствах.

Когда вы начинаете заполнять такое поле на мобильнике, там автоматически переключается раскладка клавиатуры. Например, для email отобразятся латинские символы, цифры, знак @ и некоторые другие. Посмотрите на скриншоты:


Урок 20.


Поле выбора цвета
Поля для выбора цвета уже поддерживаются в этих браузерах
Нельзя упускать из виду важный параметр кота — окрас. Его также нужно ввести в нашей форме.

В HTML5 добавили новый тип color, предназначенный для полей выбора цвета. При клике на такое поле появляется окно с возможностью выбрать цвет из палитры.

Пример записи:

<input type="color">
В Chrome это выглядит так:

Поле выбора цвета в ChromeПалитра выбора цвета в Chrome

Если браузер не поддерживает поле для выбора цвета, то вместо него отображается обычное текстовое поле.


Урок 21.


Группировка элементов списка
И последнее по очерёдности, но очень важное, поле в нашей форме — поле выбора гастрономических предпочтений Кексика.

Так как список выбора может быть довольно большой, в теге select используем возможность объединять option в группы. Обычно это используется для большей наглядности и удобства поиска нужного варианта.

Для формирования группы используется тег optgroup. Атрибут label этого тега определяет заголовок группы.

Пример использования:


<select name="variants">
  <optgroup label="Группа вариантов 1">
    <option value="1">Вариант 1</option>
    <option value="2">Вариант 2</option>
    <option value="3">Вариант 3</option>
  </optgroup>
  <optgroup label="Группа вариантов 2">
    <option value="4">Вариант 4</option>
    <option value="5">Вариант 5</option>
    <option value="6">Вариант 6</option>
  </optgroup>
</select>
Вложенность групп не ограничена, внутрь каждой группы можно вложить другие группы.

Аналогично можно группировать элементы и в списках со множественным выбором.


Урок 22.


Запрет редактирования полей
Иногда возникают ситуации, когда какие-то поля требуется сделать недоступными для редактирования.

Есть два способа: использование атрибута readonly и использование атрибута disabled

Пример записи:

<input type="text" readonly>
<input type="text" disabled>
В чем же отличие между ними?

Атрибут readonly не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Введенное значение можно выделить и скопировать. Данные из этого поля отправляются на сервер.

Атрибут disabled не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Нельзя поставить фокус в это поле, введенное значение нельзя выделять и копировать. Данные из этого поля НЕ отправляются на сервер.


Урок 23.


Управление автозаполнением полей
Браузер может запоминать значения, вводимые в текстовые поля. При вводе первых букв текста выводится список сохранённых ранее значений, из которого можно выбрать подходящее. Параметрами автозаполнения можно управлять используя атрибут autocomplete.

Он может принимать два значения on и off. Первое включает автозаполнение, второе — отключает. Отключение автозаполнения обычно используется из соображений безопасности, например, чтобы не сохранялись пароли, номера банковских карт и так далее.

Пример использования:

<input type="text" autocomplete="off">
Значение по умолчанию зависит от настроек браузера.


Урок 24.

Переключение между полями
При нажатии клавиши Tab браузер передает управление (фокус) от одного элемента к другому в том порядке, в котором они были объявлены на странице. Этим порядком можно управлять при помощи атрибута tabindex.

Пример записи:

<input type="text" tabindex="3">
В качестве значения может использоваться любое целое положительное число. Значения выстраиваются последовательно и переход между элементами происходит от меньшего значения к большему.

Если представлено отрицательное значение — элемент может быть выделен, однако не участвует в последовательной навигации

Если представлен 0 — элемент может быть выделен и достигнут с помощью последовательной навигации, однако порядок навигации определён платформой


Урок 25.

Закрыть
localStorage
Кексик наконец-то попал в Норвегию и во время путешествия начал вести путевые заметки. Даже создал для этого простую форму. Но из-за плохого интернета форму часто не удавалось отправить и введённая заметка терялась.

Как справиться с этой довольно часто встречающейся проблемой, когда введённые в форму данные теряются?

Для этого можно использовать localStorage. Эта технология относится к JavaScript, а не к HTML или CSS, но промолчать о ней мы не можем.

Суть localStorage или «локального хранилища» заключается в том, что в него можно записывать данные, которые будут сохраняться в браузере. Эти данные не исчезнут даже если вы закроете браузер и откроете его снова или уйдете со страницы и потом вернётесь на неё.

Получается, что можно сохранять данные из формы в хранилище при работе с формой, а при загрузке страницы проверять хранилище на наличие данных, и если они есть, то подставлять их в форму. Таким образом можно предотвратить потерю данных при работе с формами.

Давайте проверим работу localStorage. Это просто. Мы уже всё подготовили, вам осталось только раскомментировать один тег.


Урок 26.

Закрыть
Проверяем работу localStorage
На прошлом шаге вы раскомментировали скрипт, который сохранил данные из формы в локальное хранилище вашего браузера.

На этом шаге мы проверим, что данные действительно сохранились.

Для этого нужно раскомментировать тот же самый скрипт, что и в предыдущем шаге. И если у вас достаточно современный браузер, который поддерживает localStorage, то вы увидите в форме текущего задания ваш текст.

Заметьте, что в исходном коде задания тег <textarea> пуст, поэтому данные в форму могут попасть только из хранилища. Можете даже провести эксперимент: закрыть браузер, запустить его, открыть это задание, раскомментировать скрипт и убедиться, что сохранённый текст появится вновь.

Подробнее о localStorage и других возможностях HTML5, которые позволяют улучшить опыт взаимодействие с формами, вы можете прочитать в одноимённой статье в блоге Алексея Симоненко.

http://simonenko.su/38146501854/improving-ux-for-web-form

Урок 27. КОНСПЕКТ


Конспект «Формы. Погружение»
Простая кнопка
Самая простая кнопка создаётся с помощью тега <input> c типом button. При нажатии на такую кнопку никаких действий не происходит, а все необходимые действия обычно задаются при помощи JavaScript.

Пример записи:

<input type="button" value="Кнопка">
Сброс введенных значений
В HTML-формах есть специальная кнопка, которая сбрасывает введённые значения и возвращает изначально установленные. Это поле ввода с типом reset.

Пример использования:

<input type="reset" value="Сбросить">
Кнопка возвращает те значения, которые были установлены в полях формы по умолчанию.

Кнопка-изображение
В качестве кнопки отправки формы можно использовать изображение. Для этого у тега input нужно указать тип image.

У кнопки-изображения есть еще два атрибута:

src задаёт адрес изображения;
alt задаёт альтернативный текст, отображаемый в том случае, если изображение не загружено.
Кнопка-изображение работает аналогично кнопке submit, но на сервер дополнительно передаются координаты точки, по которой был произведен щелчок.

Альтернативный способ задания кнопок
Помимо тега <input> для добавления кнопок можно использовать тег <button>. Внутри тега <button> можно размещать любые HTML-элементы, в том числе изображения. Например:

<button>Календарь <img src="calend.png" alt=""></button>
По умолчанию значение атрибута type у тега <button> — submit.

Значениями атрибута type также могут быть button и reset.

Кнопка button со значением type="reset" сбрасывает значения полей формы к изначальным.

Значение type="button" избавит кнопку от всей изначальной функциональности.

Обязательные поля
Чтобы указать, что поле обязательно для заполнения, нужно добавить ему пустой атрибут required:

<input type="text" required>
При попытке отправить форму с незаполненными обязательными полями браузер выведет всплывающее предупреждение. Эта проверка работает на клиентской части и упрощает валидацию форм. Но всегда нужно проверять отправленные данные и на стороне сервера.

Поле выбора даты и времени
Для выбора даты из календаря существует новый тип поля ввода — date. При клике на данное поле в форме всплывает календарик.

Пример записи:

<input type="date">
Для указания времени существуют дополнительные «временные» типы полей, например, time для выбора времени.

<input type="time">
Также существуют следующие типы полей:

datetime-local задаёт дату с указанием времени (без учета временной зоны);
week задаёт порядковый номер недели в году и года;
month задаёт месяц и год.
Если браузер не поддерживает указанный тип поля, то вместо него отображается обычное текстовое поле.

Список возможных значений
Для текстовых полей можно заранее определить список возможных значений, которые отображаются, когда вы начинаете вводить текст в поле. Для этого существует специальный тег <datalist>.

Пример использования:

<input type="text" list="browsers" name="browser">

<datalist id="browsers">
  <option value="Firefox"></option>
  <option value="Chrome"></option>
  <option value="Safari"></option>
</datalist>
Связывание текстового поля и списка осуществляется при помощи атрибута list у тега input — значение list должно быть таким же, как значение атрибута id у списка.

Если тег input имеет специфический тип, например email или другие, то в списке отображаются только корректные для данного типа значения.

Поле ввода числового значения
Для ввода числовых значений существует специальный тип поля ввода number. Рядом с полем браузер автоматически подставляет две стрелочки для увеличения и уменьшения числового значения.

Пример записи:

<input type="number">
Верхняя и нижняя границы числовых значений задаются при помощи вспомогательных атрибутов min и max. А атрибут step устанавливает величину шага изменения значения.

Поле поиска
Поле поиска задаётся при помощи тега <input> с типом search.

Пример записи:

<input type="search">
В некоторых браузерах внутри него появляется крестик для сброса введённого значения.

Автофокус
Для того, чтобы отметить поле, в которое по умолчанию нужно установить курсор используется пустой атрибут autofocus.

Пример записи:

<input type="text" autofocus>
Такой атрибут должен быть только один на странице.

Выбор из диапазона
Для выбора значения из диапазона подходит тип поля range.

Такое поле выглядит как шкала с ползунком и позволяет выбрать число из некоторого интервала значений.

Пример записи:

<input type="range" min="1" max="10">
Атрибуты min и max устанавливают нижнюю и верхнюю границу допустимых значений, а атрибут step устанавливает величину шага изменения значения.

Область для вывода результата
Тег <output> представляет собой область, куда выводятся какие-либо результаты вычислений, обычно полученные при помощи JavaScript.

Пример записи:

<output name="sum">[значение по умолчанию]</output>
Значение по умолчанию при этом можно не задавать, тогда область вывода будет пустой.

Группировка полей формы
Для того, чтобы зрительно отделить одни поля от других используется тег fieldset.

Пример:

<fieldset>
  <input type="text">
</fieldset>
<fieldset>
  <textarea></textarea>
</fieldset>
По умолчанию браузеры отображают результат в виде рамки вокруг этой группы полей, но при помощи CSS можно изменить его внешний вид.

Для каждой группы можно добавить её заголовок. Для этого внутрь тега fieldset надо поместить тег legend:

<fieldset>
  <legend>Заголовок группы</legend>
  <input type="text">
</fieldset>
Паттерны значений полей
Для создания поля, принимающего данные определённого формата, используется атрибут pattern, в котором с помощью регулярного выражения описывается требуемый формат.

Поле ввода телефона
За ввод телефонных номеров отвечает тип поля tel. В такое поле полезно добавлять атрибут pattern, чтобы избежать ошибки при вводе данных.

В мобильных браузерах при фокусе на такое поле появляется клавиатура, позволяющая вводить только цифры и символы телефонных номеров.

Подсказка при заполнении полей
Для добавления подсказки к полю формы используется специальный атрибут placeholder:

<input type="text" placeholder="Текст подсказки">
Текст подсказки выводится внутри текстового поля, а при вводе значения — автоматически убирается.

Поля ввода адресов сайтов и email
В HTML5 добавлены два типа полей email и url, предназначенные для ввода электронной почты и адреса сайта. Эти поля автоматически проверяют формат введённых данных.

Пример записи:

<input type="email">
<input type="url">
Поле выбора цвета
В HTML5 добавили новый тип color, предназначенный для полей выбора цвета. При клике на такое поле появляется окно с возможностью выбрать цвет из палитры.

Пример записи:

<input type="color">
Если браузер не поддерживает поле для выбора цвета, то вместо него отображается обычное текстовое поле.

Группировка элементов списка
В теге select можно объединять option в группы.

Для формирования группы используется тег optgroup. Атрибут label этого тега определяет заголовок группы.

Пример использования:


<select name="variants">
  <optgroup label="Группа вариантов 1">
    <option value="1">Вариант 1</option>
    <option value="2">Вариант 2</option>
    <option value="3">Вариант 3</option>
  </optgroup>
  <optgroup label="Группа вариантов 2">
    <option value="4">Вариант 4</option>
    <option value="5">Вариант 5</option>
    <option value="6">Вариант 6</option>
  </optgroup>
</select>
Вложенность групп не ограничена, внутрь каждой группы можно вложить другие группы.

Аналогично можно группировать элементы и в списках со множественным выбором.

Запрет редактирования полей
Для того, чтобы сделать поле недоступным для редактирования есть два способа: использование атрибута readonly и использование атрибута disabled

Атрибут readonly не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Введенное значение можно выделить и скопировать. Данные из этого поля отправляются на сервер.

Атрибут disabled не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Нельзя поставить фокус в это поле, введенное значение нельзя выделять и копировать. Данные из этого поля НЕ отправляются на сервер.

Управление автозаполнением полей
Параметрами автозаполнения можно управлять используя атрибут autocomplete. Он может принимать два значения on и off. Первое включает автозаполнение, второе — отключает.

Пример использования:

<input type="text" autocomplete="off">
Значение по умолчанию зависит от настроек браузера.

Переключение между полями
При нажатии клавиши Tab браузер передает управление (фокус) от одного элемента к другому в том порядке, в котором они были объявлены на странице. Этим порядком можно управлять при помощи атрибута tabindex.

Пример записи:

<input type="text" tabindex="3">
В качестве значения может использоваться любое целое положительное число. Значения выстраиваются последовательно и переход между элементами происходит от меньшего значения к большему. Если представлено отрицательное значение — элемент может быть выделен, однако не участвует в последовательной навигации

Если представлен 0 — элемент может быть выделен и достигнут с помощью последовательной навигации, однако порядок навигации определён платформой

Из соображений доступности не рекомендуется менять порядок навигации по полям ввода по умолчанию.

localStorage
Если данные из формы по каким-то причинам не переданы на сервер, они могут пропасть. Справиться с этой довольно часто встречающейся проблемой поможет localStorage.

Суть localStorage заключается в том, что в него можно записывать данные, которые будут сохраняться в браузере.

Можно сохранять данные из формы в хранилище при работе с формой, а при загрузке страницы проверять хранилище на наличие данных, и если они есть, то подставлять их в форму. Таким образом можно предотвратить потерю данных при работе с формами.


Урок 28. Испытание
