Курс 4. Знакомство с PHP. Часть 1: Условия в PHP


Урок 1. 
Урок 2. 

Закрыть
Условие if в PHP
Отлично! Мы изменили значение переменной на true, и акция стартовала.

В программировании true значит истина, а false — ложь. Когда мы задали переменной значение true, условие выполнилось и компонент с акцией подключился.

Что за условие? В языке PHP существует специальная конструкция, которая позволяет выполнять какие-то действия в зависимости от выполнения условий. Например, наш компонент с акцией подключился (действие), потому что значение переменной стало true (условие).

if (условие) {
  тело условия
  // В теле условия находятся действия
}
Первая часть конструкции — слово if, которое называют условным оператором. Дальше в круглых скобках идёт условие, а в фигурных скобках находится тело условия — действия, которые должны выполниться.

Владелец интернет-магазина решил ввести скидки на сайте. Специально для этого программисты создали переменную $discount, в которой хранится размер скидки в рублях. Если он больше нуля, то скидка есть и цена товара должна уменьшиться.

Давайте сначала проверим, что скидка есть. Внутри круглых скобок мы сравним размер скидки с нулём, и если он больше нуля, то выведем в консоль информацию о наличии скидки.

Чтобы сравнить значение с нулём нам понадобится знак «больше» > — оператор сравнения. Он проверяет, больше ли значение слева, чем значение справа. В учебнике по PHP вы можете найти дополнительную информацию об условиях и операторах.

Выглядеть наше условие будет примерно так:

if ($temperature > 20) {
  keks_log('Погода хорошая!')
  // Эти действия выполнятся, если условие в круглых скобках истинно
}
Поехали!



https://htmlacademy.ru/tutorial/php/syntax#Условные-конструкции

https://htmlacademy.ru/tutorial/php/syntax#Операторы

Урок 3.  
Используем арифметические операторы в PHP
Итак, мы можем определять, есть ли скидка, теперь давайте посчитаем новую цену товара с учётом этой скидки. Результат выведем в консоль.

Посчитать новую цену товара легко. Для этого у нас есть две переменные, в которых хранятся начальная цена и размер скидки — $price и $discount.

В теле условия вычтем скидку из цены товара и запишем результат в новую переменную $price_with_discount.

За работу!

В программировании часто используют математические знаки — их называют арифметическими операторами. Например, оператор + складывает значения, оператор * умножает, / делит. Подробнее об этом можно узнать из спецификации языка.
https://www.php.net/manual/ru/language.operators.arithmetic.php

Урок 4. 

Добавляем цену на страницу товара
Теперь в сценарии две переменные $price_with_discount и $price, в которых хранятся старая и новая цена. Чтобы увидеть эти данные на странице товара, нужно внедрить их в шаблон. Мы уже умеем это делать.

Наши верстальщики как раз доработали шаблон и добавили примеры кода для отображения новой и старой цены.

Заменим статичные цены в разметке на нужные переменные, затем поменяем значение цены и скидки в сценарии, чтобы увидеть, как изменятся цены на странице.

Будем использовать сокращённую запись:

<p class="price-old"><i>Цена </i><?= $price ?>₽</p>
<p class="price-new"><i>Новая цена </i><?= $price_with_discount ?>₽</p>
Подробнее о добавлении переменных в шаблон мы рассказывали в части «Основы PHP» в стартовом тренажёре. С сокращённой записью мы познакомились в одном из заданий


Урок 5. 

Закрыть
Внедряем условие if в шаблон
Цена со скидкой выводится в блоке «Новая цена», но этот блок нужен только если есть скидка. Если скидки нет, достаточно блока «Цена» и переменной $price. Это значит, что в зависимости от ситуации разметка меняется.

// Если скидки нет
<p class="price-old"><i>Цена </i>10000₽</p>

// Если скидка есть
<p class="price-old"><i>Цена </i>10000₽</p>
<p class="price-new"><i>Новая цена </i>5000₽</p>
PHP позволяет использовать условия внутри шаблонов, чтобы менять разметку в зависимости от ситуации. Синтаксис такой:

<?php if (условие): ?>
  разметка
<?php endif; ?>
Какие особенности у этой записи:

при добавлении условий используется полная запись PHP-тегов, а не сокращённая;
вместо фигурных скобок после if ставится двоеточие;
конец условия в шаблоне обозначается командой endif, после которой ставится точка с запятой.
Обернём блок с новой ценой в условие — он будет появляться, если скидка есть. Это значит, что значение $discount должно быть больше 0. Разметка блока «Цена» останется неизменной.


Урок 6. 

Используем логические значения true и false
Отличная работа! Но не время расслабляться — прилетела новая задачка — добавлять новым товарам лейбл «new».

Если товар новый, ему в разметке нужно добавить дополнительный класс item-new. Получается, что нам необходимы два варианта разметки — с этим классом и без него. Верстальщики уже подготовили для нас эти два варианта:

<section class="item">
// Если условие не выполняется и товар не новый
<section class="item item-new">
// Если условие выполняется, лейбл добавится к новому товару
Чтобы модифицировать разметку в зависимости от условия, используем уже знакомый нам приём — внедрим PHP-код прямо в шаблон.

<section class="item
  <?php if (условие): ?>
    PHP-код
  <?php endif; ?>
">
Но как узнать, что товар новый?

Программисты решили, что признак новизны будет храниться в переменной $is_new. Товар считается новым, если значение переменной true, и не новым, если false.

Мы уже сталкивались с такими значениями в самом начале, когда включали акцию «Фиолетовый вторник». Они называются логическими или булевыми. Булевых значений всего два: true — означает «истинно», false — означает «ложно». Конструкции с логическими значениями называются логическими операциями.

$is_new = true;

if ($is_new) {
  keks_log('Новинка!');
}
// В консоль выведется: "Новинка!"
Значение переменной в круглых скобках ни с чем не сравнивается. Если оно true, то действия внутри тела условия выполняются. Если значение переменной будет false, то не выполняются.

Часть кода разработчики уже написали, наша задача его доработать. Приступим!



Урок 7. 

Применяем логическое ИЛИ в PHP
Круто, мы научились помечать новые товары! Теперь разработчики решили выводить ещё и метку о «горячих» товарах. Если товар последний на складе или со скидкой больше 1400, нужно добавить ему класс item-hot, и лейбл «горячести» появится на странице.

Сейчас у нас есть несколько условий, и мы должны выполнить действие, если хотя бы одно из них выполняется. Для таких ситуаций нужен логический оператор ИЛИ. Он называется логическим, потому что с его помощью выполняются операции с логическими значениями.

Обозначается он так: ||.

Например:

$mark = 3;
$clean = true;

if ($mark > 4 || $clean) {
  keks_log('Маам, ну купи мороженку!');
  // Мы попросим мороженку, если получили 5 или прибрались в комнате
}
Команды в теле условия выполнятся только тогда, когда одно или оба условия в круглых скобках истинны.

Прежде чем добавлять класс в разметку, давайте посмотрим, как работает оператор ИЛИ на практике. Напишем условие и выведем в консоль сообщение о большой скидке. Для хранения информации о том, что товар последний, разработчики создали переменную $is_last.



Урок 8. 


Закрыть
Конкатенация строк в PHP
Теперь добавим в разметку класс item-hot, который покажет на странице лейбл «хит продаж». Он будет появляться, если выполняется хотя бы одно из двух условий: скидка больше 1400 рублей или товар последний на складе.

Мы уже умеем писать в разметке условия, которые её модифицируют. Но это может быть громоздко — ради добавления всего одной новой строки мы пишем в шаблоне целых три. Но есть ещё один способ модификации разметки — внедрить в неё всего одну переменную, а в сценарии сформировать само условие и записать в эту переменную нужную строку.

Для выполнения задачи, нам нужно, чтобы в разметке находился класс item, и в зависимости от выполнения условия, класс item-hot. Поэтому в переменной должна быть записана либо строка 'item', либо 'item item-hot'. Записывать в переменную одно значение мы уже умеем. Как добавить второе? С помощью конкатенации — операции склеивания нескольких строк в одну. Делается это с помощью точки ., или оператора конкатенации.

$mood = 'Я люблю' . ' PHP';
// Что получится? Правильно, 'Я люблю PHP'.
О конкатенации вы также можете почитать в учебнике по PHP.

Пора приступать к заданию. Создадим переменную $product_class, запишем туда нужные значения и убедимся, что конкатенация работает.

https://htmlacademy.ru/tutorial/php/syntax#Конкатенация


Урок 9. 

Закрыть
Внедряем переменную в шаблон
Конкатенация отлично справляется с нашей задачей. Осталось только внедрить переменную $product_class в шаблон, чтобы лейбл добавился к разметке.

Будем использовать сокращённую запись.

<?= $product_class ?>
За работу!


Урок 10. 

Закрыть
Проверяем несколько условий
Отлично! Мы познакомились с двумя способами модификации шаблона. Первый, когда он меняется с помощью условия в самом шаблоне. Второй — с помощью внедрения переменной. Код в шаблоне значительно сократился, когда мы использовали второй вариант. Поэтому для решения новой задачи используем его ещё раз.

А вот и она — задача. Протестировав два разных лейбла — признак новизны и признак «горячести» товара, разработчики решили сделать возможность добавлять сразу оба. То есть, у товара могут быть одновременно классы item-hot и item-new.

<section class="item item-new item-hot">
// Если оба условия выполнятся, на странице будет два лейбла
Итого у нас получается три класса. Представляете, как было бы громоздко, если бы мы делали всё внутри шаблона? А сейчас нам достаточно добавить в сценарий ещё одно условие и записать в него конкатенацию ещё раз.

Сделаем это!



Урок 11. 

Применяем логическое И в PHP
Мы отлично справились с задачами на странице товара!

Пока мы добавляли товару цены и лейблы, клиенты пожаловались, что на странице доставки нет информации о стоимости этой услуги. Давайте это исправим!

Программисты рассчитали в сценарии delivery.php итоговую цену товара и записали её в переменную $final_price. Наша задача — рассчитать стоимость доставки товара и добавить результат на страницу.

Условия для расчёта такие:

Если товар новый и $final_price меньше 2000, доставка равна цене товара.
В остальных случаях доставка — $final_price / 20 (цена товара, делённая на 20).
Как обычно, будем решать задачу постепенно и начнём с первого условия. Чтобы оно было истинно, нужно, чтобы товар одновременно был новым и дешевле 2000. В таких случаях используют логическое И.

Этот оператор обозначается двумя амперсандами &&. Если операции сравнения слева и справа от него истинны, то всё условие считается истинным, и только в таком случае действия из тела условия выполняются.

$is_sunny = true;
$temperature = 25;

if ($is_sunny && $temperature > 22) {
  keks_log('Говорю, что заболел, и иду гулять!');
  // Если на улице солнце и больше 22 градусов,
  // прогуливаем работу
}
Добавим в сценарий delivery.php условие. Проверим, что товар новый и дешевле 2000. В теле условия создадим переменную $delivery_cost со стоимостью доставки. Выведем эту переменную в консоль.



Урок 12. 
Знакомимся с else
Мы рассчитали доставку при одном условии. В остальных случаях доставка — цена товара, делённая на 20. Как обозначить «в остальных случаях»?

Для этого есть конструкция else. Её используют, чтобы обозначить альтернативный вариант действий, если условие внутри if не выполнится.

if (условие) {
  действия;
} else {
  другие действия;
}
Читается это примерно так: если условие выполняется, сделай действия, иначе сделай другие действия.

Чтобы добавить альтернативную конструкцию в код, после закрывающей фигурной скобки if добавляем слово else, фигурные скобки, а внутри фигурных скобок пишем, какие действия надо выполнить.

Добавим else в наше условие. Если условие в if неверное, значение переменной $delivery_cost будет $final_price / 20.

Урок 13. 

Закрыть
Добавляем стоимость доставки в шаблон
Блок с контентом страницы доставки уже подготовлен и находится в файле components/delivery_info.php. Разработчики вывели в шаблон переменные $title, $img_url и $final_price. Нам остаётся добавить туда же стоимость доставки — переменную $delivery_cost.

Добавим переменную с помощью сокращённой записи. Затем в сценарии delivery.php поменяем значения переменных $discount и $is_new, чтобы убедиться, что информация на странице меняется.


Урок 14. 

Закрыть
Подставляем значения из базы данных в переменные
Мы использовали статичные данные и сами меняли значения переменных, чтобы проверить, что программа работает.

$price = 2500;
$discount = 600;
$is_new = true;
Пришло время сделать наш код универсальным. Подставим в переменные реальные значения с помощью команд из базы данных:

get_product_price ($id) — цена;
get_product_discount ($id) — размер скидки;
get_product_is_new ($id) — новый ли товар.
Наш магазинчик почти готов, но пока работает странно. Мы можем заказать только один товар, информацию о котором берём из параметра в адресе. Разберёмся с этим в дальнейших ча

