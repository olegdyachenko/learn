Курс 4. Знакомство с PHP. Часть 4: Числа и строки в PHP


Урок 1. 
Создаём пагинацию в каталоге
Интернет-магазин, над которым мы трудились в прошлых частях, отлично работает, но Кекс всё не успокоится. Он отказался от фильтров в каталоге и теперь хочет разделить его на страницы. На каждой странице должно быть не больше шести товаров. Разработчики называют постраничный вывод информации пагинацией.

Товары хранятся в массиве $products, они все сейчас отображаются на странице каталога. В переменной $limit записано, сколько товаров нужно показывать на странице. В нашем случае — 6.

В переменной $offset (в переводе с английского, «смещение») хранится порядковый номер первого товара на текущей странице. Если выводить по шесть товаров, то для первой страницы смещение будет 0, для второй — 6, для третьей — 12 и так далее.

Схема: смещение
Чтобы показать на странице лишь шесть товаров, используем встроенную функцию array_slice. Мы познакомились с ней в прошлой части. Эта функция копирует часть исходного массива и возвращает её в виде нового массива.

Функция array_slice принимает четыре аргумента. Чтобы получить товары для одной страницы, передадим функции следующие значения:

исходный массив — $products,
первый элемент — $offset,
количество элементов — $limit,
сохранять ли ключи — true, потому что ключ — это идентификатор товара, он нужен, чтобы показать правильную информацию о товаре.
Для первой страницы смещение $offset равно нулю, поэтому функция вернёт массив с первыми шестью товарами. Выведем полученный массив на страницу. После этого изменим значение переменной $offset, чтобы посмотреть, как выглядят разные страницы каталога.

Чтобы было удобнее следить за смещением, Думпо временно добавил на карточки товаров их порядковые номера.

Урок 2. 

Считаем смещение
Мы использовали функцию array_slice, чтобы вывести на страницу лишь шесть товаров. После этого вручную изменили значение переменной $offset, имитируя передвижение покупателя по страницам каталога. Но нам нужно, чтобы смещение считалось автоматически, в зависимости от страницы, на которой находится покупатель.

Номер страницы указан в параметере запроса page в адресной строке мини-браузера.

catalog.php?page=1
Получим значение этого параметра с помощью $_GET и сохраним его в переменной. Мы уже работали с параметрами запроса и $_GET.

$page = $_GET['page'];
Используем значение параметра, чтобы посчитать смещение для любой страницы каталога. Формула выглядит так:

$offset = ($page - 1) * $limit;
Смещение начинается с нуля, а отсчёт страниц — с единицы. Чтобы не пропустить первые шесть товаров, сначала вычтем единицу из номера страницы. Полученное число умножим на количество товаров на странице:

// Если не вычесть единицу:
$offset = 1 * 6; // Первая страница – смещение равно 6

// Правильная формула
$offset = (1 - 1) * 6; // Первая страница – смещение равно 0
$offset = (2 - 1) * 6; // Вторая страница – смещение равно 6
$offset = (3 - 1) * 6; // Третья страница – смещение равно 12
И так далее для любой страницы каталога. То, что нужно!

Посчитаем смещение, используя формулу и параметр из адресной строки. После этого изменим значение в адресной строке и убедимся, что на страницах выводятся правильные товары.

В первых частях, до знакомства с массивами, мы для простоты называли $_GET командой, но на самом деле это суперглобальный ассоциативный массив. Суперглобальные массивы, как встроенные функции, являются частью языка PHP. Подробнее о них вы можете почитать в документации.

https://www.php.net/manual/ru/language.variables.superglobals.php

Урок 3.  

Закрыть
Функция intval
Мы посчитали смещение для любой страницы каталога и попробовали менять параметр page. Если в адресной строке указать число, то всё работает, но если значение не указать или указать неправильно, то на странице выводятся шесть последних товаров. Почему так происходит?

Причина в этой команде:

$offset = ($page - 1) * $limit;
Вычесть число можно только из другого числа. Если в переменной $page оказывается нечисловое значение, PHP пытается преобразовать его в число. А если не выходит, подставляет на его место ноль. Подробнее о преобразовании вы можете почитать в документации.

Если в каталоге в адресной строке указать неправильное значение, то вместо номера страницы в переменную $page подставится ноль. В результате смещение окажется равным -6. Это значение мы передаём вторым аргументом в функцию array_slice:

$products_on_page = array_slice($products, $offset, $limit, true);
Если второй аргумент функции — отрицательное число, отсчёт элементов начинается с конца массива: -1 — последний элемент, -2 — второй элемент с конца и так далее. Мы передаём функции -6, то есть просим начать с шестого элемента с конца. В итоге на страницу выводятся последние шесть товаров.

Это может запутать покупателей. Если адрес указан неверно, должна открываться первая страница каталога. Для этого сначала проверим, можно ли получить из параметра page число. Если можно, используем его. А если нельзя, используем число 1.

Получить число из параметра page можно с помощью встроенной функции intval. Функция принимает любое значение и всегда возвращает число. Если передать ей обычное число, она вернёт его же. Но если передать строку, функция попробует извлечь из неё число. Получить из строки число можно, если оно идёт в самом начале. Если числа в строке нет или если оно идёт не первым, функция вернёт 0:

keks_log(intval('38 попугаев')); // Выведет: "38"
keks_log(intval('Пятница 13')); // Выведет: "0"
Передадим функции intval значение из параметра page и посмотрим, что она вернёт. Поэкспериментируем с разными значениями.


Урок 4. 

Сокращённый тернарный оператор ?:
Мы преобразовали значение из адресной строки в число, используя функцию intval. Если функция вернула ноль, то адрес указан неверно. Чтобы в этом случае открывалась первая страница каталога, нужно указать переменной $page значение по умолчанию.

Используем сокращённый тернарный оператор — ?:. Он обозначается знаком вопроса и двоеточием:

$foo = значение-1 ?: значение-2
Оператор работает так: если значение-1 истинно, то в переменную запишется оно. А если ложно, то запишется значение-2.

Чтобы открывать по умолчанию первую страницу каталога, укажем переменной $page второе возможное значение:

$page = intval($_GET['page']) ?: 1;
Если из параметра в адресной строке нельзя извлечь число, функция intval вернёт ноль.

// Функция intval вернула 0
$page = 0 ?: 1;
В PHP ноль считается ложным. Так как первое значение ложное, в переменную запишется второе значение — число 1.

Ложными в PHP также считаются строки '' и '0', булево значение false и массивы без элементов. Остальные числа, строки и массивы — истинные.

Используем сокращённый тернарный оператор, чтобы указать второе значение для переменной $page. После этого убедимся, что первая страница каталога открывается даже тогда, когда указано неверное значение параметра.

Тернарный оператор похож на условие if. Об их сходстве и различиях, а так же о полной версии тернарного оператора мы поговорим в одном из следующих заданий.


Урок 5. 

Закрыть
Цикл for
Мы позаботились, чтобы в каталоге по умолчанию открывалась первая страница. Теперь ничего не сломается, даже если забыть про параметр page в адресной строке. Но можно сделать пагинацию ещё удобнее, добавив в шаблон ссылки на все страницы каталога.

Ссылок на страницы будет несколько, поэтому используем цикл. Мы уже работали с циклом while в одной из прошлых частей. С ним следует быть осторожным — если забыть увеличить счётчик, получится бесконечный цикл, и страница зависнет.

Есть другой вариант — цикл for. Он очень похож на while, но синтаксис у него компактнее, и при его использовании очень сложно забыть про счётчик.

for (перед циклом; условие; после итерации) {
  тело цикла
}
Код в круглых скобках состоит из трёх частей, разделённых точкой с запятой:

код, который выполнится один раз до начала работы цикла. Обычно здесь объявляют переменную-счётчик.
условие, которое будет проверяться перед каждой итерацией цикла. Если условие истинно, код внутри тела выполнится, если ложно — цикл завершит работу.
код, который будет выполняться после каждой итерации. Здесь обычно увеличивают переменную-счётчик.
Как и в других циклах, тело цикла for пишут в фигурных скобках.

Разберём по шагам, как создать цикл for. Сначала опишем переменную-счётчик, которая создастся перед началом цикла:

for ($i = 1) { }
Укажем условие, которое будет проверяться перед каждой итерацией:

for ($i = 1; $i <= 9;) { }
После итерации счётчик должен увеличиться на один:

for ($i = 1; $i <= 9; $i = $i + 1) { }
Добавим код в тело цикла:

for ($i = 1; $i <= 9; $i = $i + 1) {
  keks_log($i);
}
Готово! Цикл в примере выведет в консоль числа от 1 до 9.

Потренируемся использовать цикл for. Выведем в консоль числа от 1 до 5.


Урок 6. 

Внедряем цикл for в шаблон
Мы научились создавать цикл for. Он пригодится нам, чтобы добавить в шаблон ссылки на разные страницы каталога.

Каталог товаров

1
2
3
4
5
Ссылки будут элементами упорядоченного списка. Создадим их с помощью цикла for.

Чтобы внедрить цикл в шаблон, используем такой синтаксис:

PHP-теги пишем полностью — <?php ?>;
вместо фигурных скобок ставим двоеточие — for ():;
конец цикла обозначаем командой endfor, после которой идёт точка с запятой.
<ol>
<?php for ($i = 1; $i <= 9; $i = $i + 1): ?> // Начало цикла
  <li>...</li>                                // Тело цикла
<?php endfor; ?>                             // Конец цикла
</ol>
Код в примере создаст 9 элементов списка.

Нам нужно, чтобы в каждом элементе списка была ссылка на отдельную страницу каталога. Текстом ссылки будут числа — номера страниц. Для этого выведем переменную-счётчик внутри тега <a>:

<li><a><?= $i ?></a></li>
Предположим, что у нас 5 страниц в каталоге. Используем цикл for, чтобы создать ссылки на них.


Урок 7. 

Закрыть
Добавляем адрес в атрибут href
Мы создали список с ссылками, но ссылки пока никуда не ведут. Чтобы они заработали, нужно указать адрес страницы в атрибуте href.

Адрес каждой страницы каталога состоит из адреса файла и параметра запроса. Они разделяются вопросительным знаком:

catalog.php?page=1
Адрес файла у каждой страницы одинаковый — catalog.php. Параметр запроса тоже один — page. Но вот значение этого параметра у разных страниц будет отличаться. Это значение совпадает со значением переменной-счётчика.

Используем переменную $i, чтобы указать в ссылке правильный адрес страницы:

<a href="catalog.php?page=<?= $i ?>"><?= $i ?></a>
Добавим значение атрибуту href, после чего убедимся, что ссылки на страницы каталога работают.


Урок 8. 

Считаем страницы каталога
Мы создали ссылки на страницы каталога, но ссылок получилось больше, чем нужно. Так вышло потому, что в цикле мы использовали произвольное число 5. Но ведь количество ссылок должно соответствовать числу страниц с товарами. Выясним, сколько в каталоге таких страниц.

Чтобы узнать, сколько в каталоге страниц с товарами, разделим общее число товаров на количество товаров на одной странице. Используем встроенную функцию count, чтобы узнать количество товаров в массиве $products. Мы уже работали с этой функцией в одной из прошлых частей.

$array_quantity = count($array);
Разделим общее число товаров на переменную $limit, в которой храним количество товаров на одной странице. Запишем результат в переменную и используем её в шаблоне, чтобы создать правильное количество ссылок.


Урок 9. 

Закрыть
Функция ceil
Мы разделили общее число товаров в каталоге на количество товаров на одной странице и использовали результат, чтобы создать ссылки на страницы каталога. Ссылок получилось три, но на трёх страницах все товары не помещаются. Есть ещё четвёртая страница, но ссылка на неё не создалась.

Почему так произошло? Давайте посчитаем. Всего в каталоге 21 товар. На одной странице показывается шесть товаров. Если разделить 21 на 6, получим 3.5. Именно это число и попадает в переменную $pages.

В условии цикла мы указали $i <= $pages. Переменная-счётчик $i увеличивается на 1 на каждой итерации. Цикл выполняет три итерации, а на четвёртой значение счётчика оказывается 4. Это больше 3.5, поэтому код в теле цикла не выполняется, и четвёртая ссылка не создаётся.

// Условие цикла: $i <= $pages;

// Первая итерация: $i = 1;
1 <= 3.5; // true

// Вторая итерация: $i = 2;
2 <= 3.5; // true

// Третья итерация: $i = 3;
3 <= 3.5; // true

// Чертвёртая итерация: $i = 4;
4 <= 3.5; // false
Следует учесть, что число в $pages может быть дробным. Создавать ссылку нужно даже в том случае, если последняя страница заполнена не полностью. Для этого округлим число страниц вверх. Для такого округления в PHP есть встроенная функция ceil. Она принимает число и, если оно дробное, округляет его вверх до ближайшего целого:

keks_log(ceil(3.5));     // Выведет: "4"
keks_log(ceil(3.99999)); // Выведет: "4"
keks_log(ceil(3.00001)); // Выведет: "4"
Используем функцию ceil, чтобы получить правильное число страниц. Подставим это число в цикл в шаблоне и создадим ссылки на все страницы с товарами.

В PHP также есть две другие функции для округления: floor и round. Первая округляет вниз, а вторая — в обе стороны, до ближайшего целого.

keks_log(floor(3.9)); // Выведет: "3"
keks_log(round(3.4)); // Выведет: "3"
keks_log(round(3.6)); // Выведет: "4"

Урок 10. 

Тернарный оператор ?:
Мы создали ссылки на все страницы с товарами, теперь покупателям доступен весь ассортимент магазина. Но как им понять, на какой странице каталога они находятся? Выделим ссылку на текущую страницу, добавив ей специальный класс.

Чтобы вычислить, какая ссылка ведёт на текущую страницу, используем тернарный оператор. Мы уже работали с его краткой записью. Полная запись позволяет явно указать условие:

условие ? значение-1 : значение-2;
Если условие истинно, то PHP использует значение-1, а если ложно — значение-2. После условия ставится вопросительный знак, а значения разделяются двоеточием.

Тернарный оператор работает почти так же, как условие if. Когда использовать оператор, а когда — условие? Если нужно выбрать между двумя значениями, проще использовать тернарный оператор. Но если это не просто значения, а, например, несколько строчек кода, то лучше использовать if.

С помощью тернарного оператора удобно переключать классы в шаблоне:

<p class="<?= get_product_is_new($id) ? 'new' : 'old' ?>">...</p>
Если функция в условии вернёт true, то абзацу добавится класс new. А если функция вернёт false, то добавится класс old.

В каталоге интернет-магазина нужно добавить класс current ссылке на текущую страницу. Ссылкам на другие страницы ничего добавлять не нужно. Для обозначения пустого значения используем пустую строку — ''.

условие ? 'current' : '';
Потренируемся добавлять и убирать класс у ссылок с помощью тернарного оператора. Для этого сначала используем в условии булево значение true, а после заменим его на false.

Тернарный оператор называется так потому, что требует три операнда: условие и два значения. Все другие операторы в PHP требуют один (унарные) или два (бинарные) операнда. Подробнее об операторах можно узнать в документации.


Урок 11. 

Выделяем ссылку на текущую страницу
Мы посмотрели, как работает тернарный оператор. Булево значение true всегда истинно, поэтому класс добавился всем ссылкам. Значение false всегда ложно, поэтому, когда мы указали его, выделение у ссылок пропало.

Нам нужно добавить класс только одной ссылке — ссылке на текущую страницу. Текущая страница — это та, у которой значение счётчика $i совпадает со значением параметра в адресной строке.

Используем строгое равенство, чтобы сравнить два значения:

$i === $page;
Доработаем пагинацию в каталоге. Добавим класс current ссылке на текущую страницу. После этого убедимся, что листать каталог можно как из адресной строки, так и кликая по ссылкам.

Урок 12. 

Закрыть
Функция date
Мы сделали пагинацию в каталоге, но Кексу всё мало. Он уверен, что продажи вырастут, если добавить на страницу яркий баннер.

Маркетологи объявили 01.01.1970 самым удачным временем для покупок!

Дата, которая выводится внутри баннера, должна быть сегодняшней. Можно изменять шаблон каждый день ровно в полночь… Но лучше использовать встроенную функцию date.

Эта функция принимает строку-шаблон и возвращает дату в указанном формате.

$now = date('H:i:s d.m.Y');
keks_log($now); // Выведет: "06:14:37 30.05.2021"
Формат даты задаётся в строке-шаблоне с помощью управляющих символов. Вот некоторые из них:

Символ	Значение
d	День месяца, 2 цифры с ведущим нулём
j	День месяца без ведущего нуля
F	Полное наименование месяца (на английском)
m	Порядковый номер месяца с ведущим нулём
n	Порядковый номер месяца без ведущего нуля
Y	Порядковый номер года, 4 цифры
y	Номер года, 2 цифры
H	Часы в 24-часовом формате с ведущим нулём
i	Минуты с ведущим нулём
s	Секунды с ведущим нулём
Полный список символов вы можете посмотреть в документации.

Символы, которые не являются управляющими, функция возвращает без изменений. Поэтому мы можем использовать в строке-шаблоне пробелы, точки и так далее.

Используем функцию date, чтобы вывести внутри баннера сегодняшнюю дату. Верстальщик уже всё подготовил, а Думпо скопировал вызов функции date из другого проекта. Дата, которую возвращает функция, хранится в переменной $today:

$today = date('j F y');
Выведем с помощью переменной $today дату внутри баннера. Посмотрим, в каком формате она выведется, и, если нужно, изменим его.

По умолчанию функция date возвращает время той временной зоны, которая указана в настройках PHP на сервере. Временную зону можно изменить из сценария с помощью функции date_default_timezone_set. Подробности в документации.

https://www.php.net/manual/ru/function.date.php
https://www.php.net/manual/ru/function.date-default-timezone-set.php


Урок 13. 

Меняем формат даты
Мы вывели сегодняшнюю дату в двух разных форматах. Но босс всё не успокоится. Он решил, что формат даты должен быть таким:

Маркетологи объявили 1 января 1970 года
самым удачным временем для покупок!

Можно использовать функцию date, чтобы вывести день и год, но получить с её помощью название месяца в правильном падеже не получится. Разобьём дату на три части и для каждой используем свою переменную.

День нужен в виде числа без ведущего нуля. За это в функции date отвечает символ j:

$day = date('j');
Месяц нужно вывести словом. Думпо создал для нас массив с названиями месяцев в правильном падеже. С помощью функции date и символа n получим номер месяца, а затем используем его как ключ, чтобы вывести подходящее слово из массива:

$months = [1 => 'января', 2 => 'февраля', 3 => 'марта', 4 => 'апреля', 5 => 'мая', 6 => 'июня', 7 => 'июля', 8 => 'августа', 9 => 'сентября', 10 => 'октября', 11 => 'ноября', 12 => 'декабря'];

$month = date('n');
keks_log($month); // Выведет: "5"
keks_log($months[$month]); // Выведет: "мая"
Чтобы получить год в виде четырёхзначного числа, используем символ Y:

$year = date('Y');
Создадим переменные для дня, месяца и года и запишем в них значения, которые вернёт функция date. После этого объединим эти значения в переменной $today с помощью конкатенации:

$a = 'Слона зовут ';
$b = 'Думпо';

keks_log($a . $b); // Выведет: "Слона зовут Думпо"

Урок 14. 

Используем двойные кавычки
Мы получили дату в нужном формате, но значения, которые мы использовали, «слиплись». Это произошло потому, что мы, составляя строку с датой, забыли добавить пробелы между значениями. Чтобы пробелы появились, нужно написать так:

$today = $day . ' ' . $months[$month] . ' ' . $year;
Такую запись сложно понять. И очень легко ошибиться, составляя её. К счастью, есть иной способ получить нужную строку.

В PHP для строк используют как одинарные ', так и двойные " кавычки. В большинстве случаев они работают одинаково, но не всегда. Например, если использовать переменную внутри одинарных кавычек, то выведется её имя. А если внутри двойных, то значение:

$name = 'Думпо';
keks_log('Слона зовут $name'); // Выведет: "Слона зовут $name"
keks_log("Слона зовут $name"); // Выведет: "Слона зовут Думпо"
О том, какие ещё есть различия между кавычками, вы можете узнать в документации.

Посмотрим, как можно вставить пробелы между переменными. Выведем в консоль строку Слона зовут Думпо:

$a = 'Слона';
$b = 'зовут'
$c = 'Думпо';

// Конкатенация
keks_log($a . ' ' . $b . ' ' . $c);

// Двойные кавычки
keks_log("$a $b $c");
Двойные кавычки помогают писать более понятный код и избежать запутанной конкатенации. Используем их, чтобы показать на странице дату вместе с пробелами.

Урок 15. 
Урок 16. 
