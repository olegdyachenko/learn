Размером шрифта управляет свойство font-size. Значение свойства задаёт желаемую высоту символа шрифта. Причём единицы измерения могут быть абсолютными или относительными. Мы уже рассматривали единицы измерения в одном из заданий прошлой части, при работе с размерами шрифта они также актуальны.

Самая часто используемая единица измерения размера шрифта — пиксели px:

p {
  font-size: 20px;
}
На самом деле абсолютную величину размера шрифта можно задавать не только в пикселях, пунктах и других величинах, но и особыми «шрифтовыми» ключевыми словами: xx-small, x-small, small, medium, large, x-large и xx-large. На практике этими единицами измерения пользуются редко. Подробно об этих ключевых словах можно узнать в спецификации.

https://www.w3.org/TR/css-fonts-3/#font-size-prop




Относительный размер шрифта
Абсолютные величины применительно к размеру шрифта — это простое, но не совсем гибкое решение и применяется для самых простых случаев.

К примеру, для всего документа задан размер шрифта:

body { font-size: 16px; }
В задании про наследование мы разбирали, что все дочерние элементы с необъявленным значением размера шрифта унаследуют этот размер, то есть 16px.

Заголовку на странице мы зададим другое фиксированное значение размера шрифта:

h1 { font-size: 32px; }
Пока что всё хорошо. Но представьте, что теперь появляется требование: на больших экранах мониторов увеличить размер шрифта документа с 16px до 20px. Если поменять размер у body, то у «наследников» размер тоже изменится. Но у заголовка размер никак не поменяется, он будет фиксированным — 32px.

Хочется сделать так, чтобы при изменении основного размера шрифта для родителя (в нашем случае это body), его дочерние элементы пропорционально меняли свои размеры шрифта. И для этого случая есть специальная единица измерения — em.

Величина 1em — это такой же размер шрифта, что и у родителя. Соответственно, если мы хотим, чтобы шрифт дочернего элемента был всегда в 2 раза больше родительского, то зададим значение 2em:

h1 { font-size: 2em; }
Такой подход к написанию стилей позволяет сделать код более гибким.

Наравне с «абсолютными» ключевыми словами существует пара «относительных» ключевых слов, которые применяются к размеру шрифта: larger и smaller. Они буквально делают размер шрифта элемента больше или меньше того размера, который задан его родительскому элементу. Подробно об этих ключевых словах можно узнать в спецификации.





Свойство line-height, высота строки
Окей, с помощью свойства font-size мы управляем размером отдельных символов шрифта. Но дело в том, что тексты — это обычно больше, чем набор символов. Тексты состоят из строк, которые располагаются друг под другом. И хотелось бы уметь управлять расположением этих строк относительно друг друга и другого контента.

Для этого в CSS есть свойство line-height. Оно управляет высотой строки или, если точнее, межстрочным интервалом.

Как и в случае с размером шрифта, значения line-height можно задавать разными способами.

По умолчанию это свойство имеет значение normal. Оно указывает браузеру, что межстрочный интервал нужно подобрать автоматически, исходя из размера шрифта. Спецификация рекомендует устанавливать его в пределах 100-120% от размера шрифта. То есть:

p {
  font-size: 10px;
  line-height: normal; /* значение будет примерно 12px */
}
Значение normal позволяет всем нестилизованным текстам выглядеть удобочитаемо. Однако, если есть необходимость отойти от стилизации по умолчанию, line-height можно задать фиксированное абсолютное значение в px.

p {
  font-size: 16px;
  line-height: 26px;
}









Относительная высота строки
Итак, какие варианты для line-height мы уже рассмотрели:

относительное значение normal, вычисляется браузером в зависимости от font-size автоматически, мы не можем им управлять;
абсолютное значение в px.
А если нам нужно задать относительное значение, но не такое, как normal? Так тоже можно. Для этого значение line-height задаётся в процентах или в виде множителя. В таком случае браузер вычисляет значение динамически в зависимости от font-size:

p {
  font-size: 10px;
  line-height: 150%; /* вычисленное значение: 10px * 150% = 15px */
  line-height: 2;    /* вычисленное значение: 10px * 2 = 20px */
}
Как вы понимаете, относительные значения более гибкие, чем абсолютные. Но для простых сайтов, таких как наш, фиксированных font-size и line-height будет вполне достаточно.




Свойство font-family, семейство шрифта
Мы уже разобрались с размерами шрифта, но как же задавать сам шрифт?

Для этого есть специальное свойство — font-family. В значении этого свойства указывается список названий шрифтов, перечисленных через запятую. В начале списка располагают самый желаемый шрифт, затем менее желаемый, а в самом конце списка — общий тип шрифта. Браузер проходит по списку слева направо и использует первый найденный в системе или на сайте шрифт. Пример:

body {
  font-family: "PT Sans", "Arial", sans-serif;
}
Если название шрифта состоит из нескольких слов, то его нужно заключать в кавычки. Одинарные названия можно оставлять как без кавычек, так и с ними для единообразия. Если браузер не находит на сайте или в операционной системе ни одно из перечисленных названий шрифтов, то он применяет последнее значение — общий системный тип шрифта. Самые распространённые типы шрифта:

serif — шрифт с засечками;

sans-serif — шрифт без засечек.


На самом деле, кроме serif и sans-serif есть ещё менее распространённые типы шрифта:

monospace — моноширинный шрифт;
cursive — шрифт с неформальным начертанием, например, имитация рукописного текста или леттеринга;
fantasy — декоративный шрифт, например, всемирно известный Comic Sans







Свойство font-weight, насыщенность шрифта
Ещё один параметр шрифта, которым мы можем управлять — это насыщенность или толщина шрифта. Шрифт может быть жирнее или тоньше обычного начертания. Устанавливается насыщенность с помощью свойства font-weight. В качестве значения можно использовать ключевое слово или число. Самые часто встречающиеся значения:

400 или normal — обычный шрифт, значение по умолчанию;

700 или bold — жирный шрифт.

Например:

h1 {
  font-weight: 400; /* то же самое что и normal */
}

p {
  font-weight: bold; /* то же самое что и 700 */
}

На самом деле, font-weight может принимать одно из девяти числовых вариантов насыщенности:

100: Thin;
200: Extra Light (Ultra Light);
300: Light;
400: Normal;
500: Medium;
600: Semi Bold (Demi Bold);
700: Bold;
800: Extra Bold (Ultra Bold);
900: Black (Heavy).
Все эти числовые значения задают степень толщины шрифта от самого тонкого до самого толстого.

Но в большинстве системных шрифтов всё равно есть только два варианта толщины: обычный normal (400) и жирный bold (700). Поэтому и остальные значения свойства используются реже.

Кроме перечисленных выше числовых значений у font-weight может быть ещё два относительных значения: bolder и lighter. Эти значения делают шрифт жирнее и тоньше, чем текущее или унаследованное значение.












Свойство text-align, горизонтальное выравнивание текста
Следующее свойство text-align описывает, как выравнивается текст внутри блока по горизонтали (на самом деле не только текст, но об этом в следующем задании).

Свойство может принимать следующие значения:

left — выравнивание по левому краю блока, это значение по умолчанию;
right — по правому краю блока;
center — по центру блока;
justify — по ширине блока, при этом слова в строке будут размещаться так, чтобы занять равномерно всё пространство строки (пробелы между словами в таком случае становятся неравномерными, так как браузер «растягивает» слова в строке).
Важно помнить, что свойство text-align применяется именно к самому блоку-контейнеру, внутри которого находится текстовый контент:

HTML:
<p>
  Я текст внутри абзаца
</p>

CSS:
p {
  text-align: center;
}
На самом деле существует ещё два значения text-align: это выравнивание к началу блока start и выравнивание к концу блока end. Если вы попробуете применить эти значения, то увидите, что эффект от значения start совпадает со значением left, а end делает то же самое, что и right.

Но это не всегда так. Дело в том, что не во всех языках текст пишется слева направо. Например, в японском текст пишется сверху вниз, и в этом случае значения left и right уже не так логичны, как в «европейских» языках.

Именно чтобы сделать CSS-код универсальным для любых направлений написания текста и появились такие значения text-align. Кстати, для управления направлением текста есть специальное свойство — writing-mode.











Выравнивание text-align не только для текста
На прошлом шаге мы упоминали, что свойство text-align способно влиять не только на тексты, но и другие элементы. Эти элементы должны быть инлайновыми, то есть это изображения, инлайн-блоки, инлайн-таблицы и другие.

Например, сейчас в задании мы разберём такой приём, который больше напоминает трюк, так как мы используем text-align для выравнивания картинки <img> внутри контейнера, то есть по факту для создания простейшей «сетки». Но об этой особенности свойства text-align очень полезно знать, так как это вполне легальный способ выравнивания элементов.

Вперёд к заданию.

https://www.w3.org/TR/css-display-3/#inline-level

Тема инлайнового контекста форматирования — целый отдельный мир CSS. В спецификации описаны разные виды блоков, которые участвуют в формировании потока документа. Также есть замечательная книга на русском об этой простой на первый взгляд, но на самом деле достаточно комплексной теме.

https://www.w3.org/TR/css-fonts-3/#relative-size-value

https://css-live.ru/articles/obzor-inlajnovyj-kontekst-formatirovaniya.html









Свойство vertical-align, вертикальное выравнивание текста
Если есть свойство для горизонтального выравнивания, то должно быть и для вертикального? Да, и это свойство vertical-align.

Этим свойством можно выравнивать инлайновые элементы относительно содержащей его строки. Самый простой пример, который мы разберём в этом задании — выровнять картинку <img> по вертикали в текстовой строке.

У свойства vertical-align много значений, но самые часто используемые:

top — выравнивание по верхнему краю строки;
middle — по середине строки;
bottom — по нижнему краю строки;
baseline — по базовой линии строки (значение по умолчанию).
В отличие от text-align свойство vertical-align задаётся самому элементу, а не содержащему его контейнеру:

HTML:
<p>
  <img src="picture.png" alt="Я картинка">
  Я текст внутри абзаца
</p>

CSS:
img {
  vertical-align: middle;
}

Помимо ключевых слов для vertical-align ещё есть возможность задавать значения в пикселях и процентах.

Процентное значение (например, vertical-align: 100%) вычисляется относительно заданной высоты строки line-height. Значение 0% — это то же самое, что и baseline, а ещё оно может быть как положительным, так и отрицательным.

Значение в пикселях (например, vertical-align: 10px) работает аналогично процентному, только отсчитывается в пикселях в большую или меньшую сторону. Значение 0px эквивалентно baseline.











Использование фона для оформления текста
Ещё один важный параметр текста — его цвет. Управляется он свойством color. Подробно это свойство и его значения разберём в следующем задании. А в этом узнаем, как можно использовать фон блока для оформления текста, а также как цвет фона и цвет текста должны сочетаться.

Цвет в CSS чаще всего задаётся в шестнадцатеричном формате с символом решётки в начале:

#000000 — чёрный цвет;
#ffffff — белый цвет;
#ff0000 — красный цвет и так далее.
Фоновое изображение для блока задаётся свойством background-image, а фоновый цвет — свойством background-color:

div {
  background-image: url("путь_к_файлу_изображения.png");
  background-color: #cccccc;
}
Фоновое изображение и фоновый цвет блока всегда должны достаточно сильно контрастировать с цветом текста. Чем больше контраст, тем удобнее читается текст в разных условиях освещённости и на разных устройствах. Поэтому если вы задаёте блоку фоновое изображение, нужно обязательно дополнительно задавать подходящий фоновый цвет. В этом случае, пока изображение загружается, или в случае, если оно совсем не загрузится, текст всё равно можно будет прочитать:

p {
  /* идеальный контраст: цвет текста белый, цвет фона — чёрный */
  background-color: #000000;
  color: #ffffff;
}

span {
  /* плохой контраст: цвет текста и фона — серые */
  background-color: #cccccc;
  color: #dddddd;
}



.partnership{
background-color:#4a87fa;                              - цвет фона
background-image:url("img/bg-partnership.svg");        - картинка
color:#ffffff                                          - цвет текста
}






https://www.w3.org/TR/css-color-3/#svg-color



Свойство color, цвет текста
Мы помним, что цветом текста и фона можно управлять свойствами color и background-color.

Теперь разберёмся подробно со значениями этих свойств.

Цвет может быть задан в виде ключевого слова (полный список ключевых слов приводится в спецификации). Например:

color: black; /* чёрный цвет */
color: red;   /* красный цвет */
color: white; /* белый цвет */
Ещё один вариант указания цвета — в виде шестнадцатеричного значения. Именно им мы пользовались в прошлом задании. В этом случае цвет формируется из красной, зелёной и синей составляющих, заданных в виде шестнадцатеричного числа от 00 до ff. Помимо шести, цветовой код может содержать три знака, в этом случае второй символ в цветовых составляющих дублируется первым:

color: #000000; /* чёрный цвет */
color: #f00;    /* красный цвет, то же что #ff0000 */
color: #fff;    /* белый цвет, то же что #ffffff */
Если не хочется иметь дело с шестнадцатеричными значениями, можно воспользоваться специальной функцией rgb, в которой указывается цвет в более привычном десятичном виде в диапазоне от 0 до 255 также в виде трёх цветовых составляющих, перечисленных через запятую:

color: rgb(0, 0, 0)       /* чёрный, то же что #000000 */
color: rgb(255, 0, 0)     /* красный, то же что #ff0000 */
color: rgb(255, 255, 255) /* белый, то же что #ffffff */
У функции rgb есть расширенная версия — rgba. В этом случае помимо указания цвета последним значением указывается степень непрозрачности цвета — alpha. Значение может быть от 0 (полностью прозрачный) до 1 (полностью непрозрачный):

color: rgba(0, 0, 0, 0.5)      /* чёрный, непрозрачный на 50% */
color: rgba(255, 0, 0, 0.3)     /* красный, непрозрачный на 30% */
color: rgba(255, 255, 255, 0.9) /* белый, непрозрачный на 90% */











Использование отступов для оформления текста
Чтобы текст был более читаемым, необходимо наличие свободного пространства в блоке для этого текста. Вокруг текста должно быть достаточно «воздуха», он не должен «прилипать» к краям, ему не должно быть «тесно».

За отступы в CSS отвечают два свойства: padding задаёт внутренние отступы в блоке, а margin задаёт внешние отступы. Пример, как можно их использовать:

p {
  padding: 10px;
  margin: 20px 0;
}
В примере выше задан внутренний отступ со всех сторон 10px, а также внешний отступ сверху и снизу 20px и 0px слева и справа. Это составные свойства. Подробно padding и margin разбираются в части «Блочная модель документа».

Посмотрите на блок aside на нашем сайте. Блоку явно не хватает отступов, давайте добавим их!















Закрыть
Свойство white-space, управление пробелами
Как вы уже знаете, браузер игнорирует множественные пробелы и переносы строк в HTML-коде. Изменить это поведение можно с помощью тега <pre>.

Однако, с помощью CSS управлять пробелами и переносами можно более гибко. За это отвечает свойство white-space, значения которого:

nowrap — схлопывает лишние пробелы и отображает весь текст одной строкой без переносов;
pre — сохраняет пробелы и переносы как в исходном коде аналогично тегу <pre>;
pre-wrap — работает как значение pre, но добавляет автоматические переносы, если текст не помещается в контейнер;
normal — режим по умолчанию: лишние пробелы и переносы строк схлопываются, текст переносится, пробелы в конце строк удаляются.

На самом деле у свойства по спецификации может быть ещё два значения:

break-spaces — поведение идентично pre-wrap, но при схлопывании пробелов остаются нетронутыми зарезервированные пробелы, такие как пробелы в конце строки;
pre-line — как normal, лишние пробелы схлопываются, но строки переносятся на символе переноса строки, на <br> и по мере заполнения строки.




















Свойство text-decoration, подчёркивание и другие эффекты
Дополнительное оформление текста можно задать с помощью свойства text-decoration. Вот его значения:

underline — подчёркивание;
line-through — зачёркивание;
overline — надчёркивание;
none — убирает вышеперечисленные эффекты.
К тексту можно одновременно применить несколько эффектов, если перечислить значения через пробел:

p {
  text-decoration: underline; /* подчёркнутый текст */
}

span {
  /* подчёркнутый и зачёркнутый текст */
  text-decoration: underline line-through;
}
Свойство text-decoration — составное, а это значит, что его можно разложить на следующие свойства:

text-decoration-line — вид линии: зачёркивание, подчёркивание или надчёркивание;
text-decoration-style — стиль линии, может принимать значения:
solid — сплошная линия;
double — двойная линия;
dotted — точечная линия;
dashed — пунктирная линия;
wavy — волнистая линия.
text-decoration-color — цвет линии.













Свойство font-style, курсив
Начертание текста можно задавать с помощью свойства font-style. Вот его основные значения:

normal — обычное начертание;
italic — курсивное начертание;
oblique — наклонное начертание.
Закономерный вопрос — а чем отличается курсивное и наклонное начертание?

Если задано значение italic, браузер будет пытаться найти в заданном шрифте отдельное курсивное начертание символов. В некоторых шрифтах отдельный курсив предусмотрен.

Если отдельного курсивного начертания в шрифте не предусмотрено, то браузер сделает текст наклонным, то есть сымитирует курсив. Что равноценно заданию тексту значения font-style: oblique.

Закрепим теорию практикой.













Свойство text-transform, регистр символов
С помощью CSS можно также управлять регистром символов: делать буквы строчными (маленькими) или заглавными (большими). Делается это с помощью свойства text-transform. Его значения:

lowercase — все строчные;
uppercase — все заглавные;
capitalize — каждое слово начинается с большой буквы;
none — отменяет изменение регистра.
Без лишних слов — к практике!




https://www.w3.org/TR/css-color-3/#svg-color
















онкости типографики
Инструктор Кекс поручил вам сделать наглядное пособие на тему «Чем отличаются шрифты с засечками от шрифтов без засечек». На самом деле всё просто.

Засечки — штрихи на конце буквы, с которых начинаются и которыми заканчиваются знаки. Засечки направляют движение глаз вдоль строк при чтении больших текстов, поэтому шрифтом с засечками обычно набирают крупные тексты для более удобного чтения.

Шрифты без засечек — выглядят более эффектно, поэтому их используют для более коротких текстов.

Сам инструктор много пишет код, поэтому ему милее всего моноширинный шрифт (именно им он набрал исходное состояние испытания). У символов в моноширинном шрифте одинаковая ширина, и это очень удобно для написания кода программы: код выглядит более структурированно, чем при обычном шрифте, где ширины всех символов разные.

Мяу! Используй следующие шрифты:

"Georgia", serif — для первого текста (шрифт с засечками);
"Verdana", sans-serif — для второго текста (шрифт без засечек);
"Times New Roman", serif — для третьего текста (шрифт с засечками);
"Tahoma", sans-serif — для четвёртого текста (шрифт без засечек).